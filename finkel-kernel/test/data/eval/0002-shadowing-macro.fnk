;;;; -*- mode: finkel -*-

;;; Expression to test name shadowing with conflictinging names bounded
;;; to macro with `with-macro' and locally declared function with `let'.

(:with-macro ((= foo
                (Macro (\ form
                         (case form
                           (LForm (L _ (List [_ body])))
                           (return `(++ "with-macro: " ,body))
                           _ (error (++ "foo: got `" (show form) "'")))))))
  (all id [(== (foo "bar")
               "with-macro: bar")

           ;; Bind `foo' to locally declared function.
           (== (let ((= foo body
                       (++ "let: " body)))
                 (foo "bar"))
               "let: bar")

           ;; The macro `foo' is still in current scope.
           (== (foo "bar")
               "with-macro: bar")

           ;; Bind `foo' with pattern matching.
           (== (let ((= (: foo _)
                       ["local let"
                        "local bar"
                        "local buzz"]))
                 foo)
               "local let")
           (== (let ((= (@ bar (Just foo))
                       (return "let: bar")))
                 foo)
               "let: bar")
           (== (let ((= (@ foo (Just bar))
                       (return "let: bar")))
                 foo)
               (Just "let: bar"))
           (== (let ((= [foo _ _]
                       ["let: bar" "" ""]))
                 foo)
               "let: bar")

           ;; Bind `foo' to function binding argument.
           (== (let ((= f1 foo
                       (foo "bar")))
                 (f1 (++ "let: ")))
               "let: bar")

           ;; Bind `foo' to lambda argument.
           (== (let ((= f2
                       (\ foo (foo "bar"))))
                 (f2 (++ "let: ")))
               "let: bar")

           ;; Bind `foo' in do-notation.
           (== (do (<- foo (return (\ x (Just (++ "do: " x)))))
                   (foo "bar"))
               (Just "do: bar"))

           ;; Bind `foo' in do-notation after using `foo'. The first use
           ;; of `foo' is from `with-macro', and the second use is
           ;; locally bounded function.
           (== (do (<- x (return (foo "bar")))
                   (<- foo (return (\ x (++ "do: " x))))
                   (return (, x (foo "buzz"))))
               (Just (, "with-macro: bar" "do: buzz")))

           ;; Pattern match in `case' expression
           (== (case (Just (++ "let: "))
                 (Just foo) (foo "bar"))
               "let: bar")

           (== (case (Just (++ "let: "))
                 (Just foo) (where bar
                              (= bar (foo "bar"))))
               "let: bar")

           ;; Shadowing with `where'
           (== (case ()
                 _ (where (foo "bar")
                     (= foo (++ "let: "))))
               "let: bar")
           (== (case ()
                 _ (where (bar "bar")
                     (= bar foo
                       (++ "let: " foo))))
               "let: bar")]))
