name: build

on:
  pull_request:
  push:
    paths-ignore:
      - '**.md'

env:
  cache-version: v5

defaults:
  run:
    shell: bash

jobs:
  stack:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            resolver: lts-11
          - os: ubuntu-latest
            resolver: lts-12
          - os: ubuntu-latest
            resolver: lts-14
          - os: ubuntu-latest
            resolver: lts-16
          - os: macos-latest
            resolver: lts-16
          - os: windows-latest
            resolver: lts-14

    env:
      STACK: stack --resolver=${{ matrix.resolver }}
      RESOLVER: ${{ matrix.resolver }}

    runs-on:
      - ${{ matrix.os }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Cache stack package database (non-windows)
        id: cache-stack-pkg-db-non-win
        # Caching under macos-latest had problem while compiling the "fkc"
        # package with the cached "~/.stack" data, disabling at the moment.
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-pkg-db-${{ matrix.resolver }}-${{ hashFiles('stack.yaml') }}-${{ env.cache-version }}

      - name: Cache stack packages database (windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Roaming\stack
          key: ${{ runner.os }}-stack-pkg-db-${{ matrix.resolver }}-${{ hashFiles('stack.yaml') }}-${{ env.cache-version }}

      - name: Cache stack (windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Programs\stack
          key: ${{ runner.os }}-stack-local-${{ matrix.resolver }}-${{ env.cache-version }}

      - name: Show stack version
        run: $STACK --version

      - name: Add PATH for executable installed with stack
        run: $STACK path --local-bin >> $GITHUB_PATH

      - name: Setup stack
        run: $STACK setup

      - name: Install dependency packages
        run: $STACK build -j 2 --test --only-dependencies

      - name: Build packages
        run: $STACK build --fast --test --coverage --no-run-tests

      - name: Run tests
        run: RESOLVER=${{ matrix.resolver }} $STACK --jobs 1 build --fast --test --coverage

      - name: Generate coverge report
        run: |
          $STACK install hpc-codecov
          HPCROOT=$($STACK path --local-hpc-root)
          DISTDIR=$($STACK path --dist-dir)
          DOCPKG=doc/include/building-package
          TIX=$(find $HPCROOT -name 'all.tix')
          hpc-codecov \
            --src=kernel --mix=kernel/$DISTDIR/hpc \
            --src=setup --mix=setup/$DISTDIR/hpc \
            --src=core --mix=core/$DISTDIR/hpc \
            --src=tool --mix=tool/$DISTDIR/hpc \
            --src=$DOCPKG/my-second-package \
            --mix=$DOCPKG/my-second-package/$DISTDIR/hpc \
            --src=$DOCPKG/my-new-package \
            --mix=$DOCPKG/my-new-package/$DISTDIR/hpc \
            --out=codecov.json --verbose $TIX

      - name: Send coverage report
        run: bash <(curl -s https://codecov.io/bash)

  cabal:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest
        plan:
          - ghc: "8.10.3"
            cabal: "3.2.0.0"
            flags: "-O0"
          - ghc: "8.10.3"
            cabal: "3.2.0.0"
            flags: "-O2"
    runs-on:
      - ${{ matrix.os }}

    steps:
      - name: Checkout project repository
        uses: actions/checkout@v2

      - name: Cache ~/.ghcup
        id: home-dot-ghcup
        uses: actions/cache@v2
        with:
          path: ~/.ghcup
          key: ${{ runner.os }}-ghcup-${{ matrix.plan.ghc }}-${{ env.cache-version }}

      - name: Cache cabal package database
        id: home-dot-cabal
        uses: actions/cache@v2
        with:
          path: ~/.cabal
          key: ${{ runner.os }}-cabal-pkg-db-${{ matrix.plan.ghc }}-${{ hashFiles('cabal.project') }}-${{ env.cache-version }}

      # Manually installing ghc and bundled packages with "ghcup" for Linux and
      # OSX, because the setup-haskell action may reuse the preinstalled GHC in
      # the github runner, and the preinstalled GHC does not contain profiling
      # library for the "base" package. Without profiling libraries, "doc"
      # package tests will fail.

      - name: Install ghcup (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          url='https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup'
          mkdir -p ~/.ghcup/bin
          curl -sL $url > ~/.ghcup/bin/ghcup
          chmod +x ~/.ghcup/bin/ghcup
          echo "$HOME/.ghcup/bin" >> $GITHUB_PATH

      - name: Install ghcup (osx)
        if: matrix.os == 'macos-latest'
        run: |
          url='https://downloads.haskell.org/~ghcup/x86_64-apple-darwin-ghcup'
          mkdir -p ~/.ghcup/bin
          curl -sL $url > ~/.ghcup/bin/ghcup
          chmod +x ~/.ghcup/bin/ghcup
          echo "$HOME/.ghcup/bin" >> $GITHUB_PATH

      - name: Install ghc and cabal-install (linux and osx)
        if: matrix.os != 'windows-latest'
        run: |
          ghcup install cabal ${{ matrix.plan.cabal }}
          ghcup install ghc ${{ matrix.plan.ghc }}
          ghcup set ghc ${{ matrix.plan.ghc }}
          which cabal
          which ghc
          cabal --version
          ghc --version

      - name: Install ghc and cabal-install (windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco source add -n mistuke -s https://www.myget.org/F/mistuke/api/v2
          choco install -y cabal --version ${{ matrix.plan.cabal }}
          choco install -y ghc --version ${{ matrix.plan.ghc }}
          refreshenv
          echo "C:/Users/runneradmin/AppData/Roaming/cabal/bin" >> $GITHUB_PATH
          echo "C:/ProgramData/chocolatey/lib/ghc/tools/ghc-${{matrix.plan.ghc }}/bin" >> $GITHUB_PATH

      - name: Show version and paths
        run: |
          ghc --version
          cabal --version

      - name: Update cabal package list
        run: cabal v2-update

      - name: Write cabal.project.local with v2-configure (non-windows)
        if: matrix.os != 'windows-latest'
        run: cabal v2-configure ${{ matrix.plan.flags }}

      - name: Write cabal.project.local with v2-configure (windows)
        if: matrix.os == 'windows-latest'
        run: cabal v2-configure --disable-library-profiling ${{ matrix.plan.flags }}

      - name: Build dependency packages
        run: cabal v2-build all -j --only-dependencies

      - name: Build packages
        run: cabal v2-build all

      - name: Run tests
        run: cabal v2-test all

      - name: Run haddock
        run: cabal v2-haddock all

  sdist:
    runs-on:
      - ubuntu-latest

    env:
      STACK: stack --resolver=lts-16

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Show versions
        run: |
          stack --version
          ghc --version
          cabal --version

      - name: Build finkel-setup
        # The "finkel-setup" is used by other packages in custom-setup stanza of
        # cabal configuration, building before running sdist command.
        run: $STACK build --fast finkel-setup

      - name: Run stack sdist
        run: $STACK sdist kernel fkc setup core tool finkel --tar-dir sdist

      - name: Emit temporary stack.yaml
        run: |
          cd sdist
          echo 'resolver: lts-0.0' > stack.yaml
          echo 'packages:' >> stack.yaml
          ls *.tar.gz | sed -e 's/\(.*\)\.tar.gz/  - \1/' >> stack.yaml
          cat stack.yaml

      - name: Build from tarballs with stack
        run: |
          cd sdist
          for t in `ls *.tar.gz`; do tar zxvf $t; done
          $STACK build --fast

      - name: Emit temporary cabal.project
        run: |
          cd sdist
          echo 'packages:' >> cabal.project
          ls *.tar.gz | sed -e 's/\(.*\)\.tar.gz/  \1/' >> cabal.project
          cat cabal.project

      - name: Build from tarballs with cabal-install
        run: |
          cd sdist
          cabal v2-update
          cabal v2-build all

      - name: Upload package tarballs
        uses: actions/upload-artifact@v2
        with:
          name: finkel-packages
          path: |
            sdist/*.tar.gz
            sdist/stack.yaml
            sdist/cabal.project
