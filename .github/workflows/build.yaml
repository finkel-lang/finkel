name: build

on:
  pull_request:
  push:
    paths-ignore:
      - '**.md'

env:
  cache-version: v6

defaults:
  run:
    shell: bash

jobs:
  stack:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            resolver: lts-11
          - os: ubuntu-latest
            resolver: lts-12
          - os: ubuntu-latest
            resolver: lts-14
          - os: ubuntu-latest
            resolver: lts-16
          - os: ubuntu-latest
            resolver: lts-17
          - os: macos-latest
            resolver: lts-17
          - os: windows-latest
            resolver: lts-17

    env:
      STACK: stack --resolver=${{ matrix.resolver }}
      RESOLVER: ${{ matrix.resolver }}

    runs-on:
      - ${{ matrix.os }}

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Cache stack package database (non-windows)
        id: cache-stack-pkg-db-non-win
        # Caching under macos-latest had problem while compiling the "fkc"
        # package with the cached "~/.stack" data, disabling at the moment.
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-pkg-db-${{ matrix.resolver }}-${{ hashFiles('stack.yaml') }}-${{ env.cache-version }}

      - name: Cache stack packages database (windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Roaming\stack
          key: ${{ runner.os }}-stack-pkg-db-${{ matrix.resolver }}-${{ hashFiles('stack.yaml') }}-${{ env.cache-version }}

      - name: Show stack version
        run: $STACK --version

      - name: Setup stack
        run: $STACK setup

      - name: Add PATH for executable installed with stack
        run: $STACK path --local-bin >> $GITHUB_PATH

      - name: Install dependency packages
        run: $STACK build -j 2 --test --only-dependencies

      - name: Build packages
        run: $STACK build --fast --test --coverage --no-run-tests

      - name: Run tests
        run: |
          RESOLVER=${{ matrix.resolver }} $STACK --jobs 1 build \
          --fast --test --coverage

      - name: Generate coverge report
        run: |
          $STACK install hpc-codecov
          HPCROOT=$($STACK path --local-hpc-root)
          DISTDIR=$($STACK path --dist-dir)
          DOCPKG=doc/include/building-package
          TIX=$(find $HPCROOT -name 'all.tix')
          hpc-codecov \
            --src=kernel --mix=kernel/$DISTDIR/hpc \
            --src=setup --mix=setup/$DISTDIR/hpc \
            --src=core --mix=core/$DISTDIR/hpc \
            --src=tool --mix=tool/$DISTDIR/hpc \
            --src=$DOCPKG/my-second-package \
            --mix=$DOCPKG/my-second-package/$DISTDIR/hpc \
            --src=$DOCPKG/my-new-package \
            --mix=$DOCPKG/my-new-package/$DISTDIR/hpc \
            --out=codecov.json --verbose $TIX

      - name: Send coverage report
        run: bash <(curl -s https://codecov.io/bash)

  cabal-install:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        plan:
          - ghc: "8.10.4"
            cabal: "3.2.0.0"
            flags: "-O0"
          - ghc: "8.10.4"
            cabal: "3.2.0.0"
            flags: "-O2"
    runs-on:
      - ${{ matrix.os }}

    steps:
      - name: Checkout project repository
        uses: actions/checkout@v2

      - name: Cache ~/.ghcup
        id: home-dot-ghcup
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: actions/cache@v2
        with:
          path: ~/.ghcup
          key: ${{ runner.os }}-ghcup-${{ matrix.plan.ghc }}-${{ env.cache-version }}

      - name: Cache cabal package database
        id: home-dot-cabal
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: actions/cache@v2
        with:
          path: ~/.cabal
          key: ${{ runner.os }}-cabal-pkg-db-${{ matrix.plan.ghc }}-${{ hashFiles('cabal.project') }}-${{ env.cache-version }}

      # Manually installing ghc and bundled packages with "ghcup" for Linux and
      # OSX, because the setup-haskell action may reuse the preinstalled GHC in
      # the github runner, and the preinstalled GHC in GitHub runner does not
      # contain profiling library for the "base" package. Without profiling
      # libraries, "doc" package tests will fail.

      - name: Install ghcup (ubuntu and macos)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        env:
          os: ${{ matrix.os }}
        run: |
          case $os in
            "ubuntu-latest")
               ghcup_name="linux"
               ;;
            "macos-latest")
               ghcup_name="apple-darwin"
               ;;
            *)
               echo Unknown os: $os
               exit 1
               ;;
          esac
          url="https://downloads.haskell.org/~ghcup/x86_64-${ghcup_name}-ghcup"
          mkdir -p ~/.ghcup/bin
          curl -sL $url > ~/.ghcup/bin/ghcup
          chmod +x ~/.ghcup/bin/ghcup
          echo "$HOME/.ghcup/bin" >> $GITHUB_PATH

      - name: Install ghc and cabal-install (linux and osx)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          ghcup upgrade
          ghcup install cabal ${{ matrix.plan.cabal }}
          ghcup install ghc ${{ matrix.plan.ghc }}
          ghcup set ghc ${{ matrix.plan.ghc }}
          which cabal
          which ghc

      - name: Install ghc and cabal-install (windows)
        if: matrix.os == 'windows-latest'
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.plan.ghc }}
          cabal-version: ${{ matrix.plan.cabal }}

      - name: Show version and paths
        run: |
          ghc --version
          cabal --version

      - name: Update cabal package list
        run: cabal v2-update

      - name: Write cabal.project.local with v2-configure (non-windows)
        if: matrix.os != 'windows-latest'
        run: cabal v2-configure ${{ matrix.plan.flags }}

      - name: Write cabal.project.local with v2-configure (windows)
        if: matrix.os == 'windows-latest'
        run: cabal v2-configure --disable-library-profiling ${{ matrix.plan.flags }}

      - name: Build dependency packages
        run: cabal v2-build all -j --only-dependencies

      - name: Build packages
        run: cabal v2-build all

      - name: Run tests
        run: cabal v2-test all

      - name: Run haddock
        run: cabal v2-haddock all

  nix-build:
    strategy:
      matrix:
        include:
          - nixpkgs: "channel:nixos-unstable"
            compiler: "ghc8103"
          # - nixpkgs: "channel:nixos-20.09"
          #   compiler: "ghc884"
          # - nixpkgs: "channel:nixos-20.03"
          #   compiler: "ghc865"

    runs-on:
      - ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=${{ matrix.nixpkgs }}

      - name: Build with nix-build
        run: nix-build --argstr compiler ${{ matrix.compiler }}

      - name: Build container image stream
        if: matrix.compiler == 'ghc8103' && github.ref == 'refs/heads/master'
        run: |
          nix-build --argstr compiler ${{ matrix.compiler }} ./nix/docker.nix
          echo "image_stream=$(readlink result)" >> $GITHUB_ENV

      - name: Push image to ghcr.io
        if: matrix.compiler == 'ghc8103' && github.ref == 'refs/heads/master'
        env:
          CRED: ${{ secrets.GHCR_USER }}:${{ secrets.GHCR_PAT }}
          FROM: docker-archive:/dev/stdin
          TO: docker://ghcr.io/${{ github.repository }}:latest
        # Using `sudo' when invoking `skopeo', to avoid `mkdir /run/containers:
        # permission denied" error.
        run: |
          ${{ env.image_stream }} | \
            gzip | \
            sudo skopeo --debug copy --dest-creds ${CRED} ${FROM} ${TO}

  make-sdist-with-stack:
    runs-on:
      - ubuntu-latest

    env:
      STACK: stack --resolver=lts-17

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2

      - name: Show versions
        run: |
          stack --version
          ghc --version
          cabal --version

      - name: Build finkel-setup
        # The "finkel-setup" is used by other packages in custom-setup stanza of
        # cabal configuration, building before running sdist command.
        run: $STACK build --fast finkel-setup

      - name: Run stack sdist
        run: $STACK sdist kernel fkc setup core tool finkel --tar-dir sdist

      - name: Emit temporary stack.yaml
        run: |
          cd sdist
          echo 'resolver: lts-0.0' > stack.yaml
          echo 'packages:' >> stack.yaml
          ls *.tar.gz | sed -e 's/\(.*\)\.tar.gz/  - \1/' >> stack.yaml
          cat stack.yaml

      - name: Build from tarballs with stack
        run: |
          cd sdist
          for t in `ls *.tar.gz`; do tar zxvf $t; done
          $STACK build --fast

      - name: Emit temporary cabal.project
        run: |
          cd sdist
          echo 'packages:' >> cabal.project
          ls *.tar.gz | sed -e 's/\(.*\)\.tar.gz/  \1/' >> cabal.project
          cat cabal.project

      - name: Build from tarballs with cabal-install
        run: |
          cd sdist
          cabal v2-update
          cabal v2-build all

      - name: Upload package tarballs
        uses: actions/upload-artifact@v2
        with:
          name: finkel-srcs
          path: |
            sdist/*.tar.gz
            sdist/stack.yaml
            sdist/cabal.project
