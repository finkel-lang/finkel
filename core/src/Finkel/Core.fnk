;;;; Finkel core language macros

(:doc "Core language macros.

Macros defined in this module are available in @finkel make@ compiler
by default, i.e., available without /require/-ing \"Finkel.Core\"
module.")

(module Finkel.Core
  (:dh1 "Phase control")
  eval-when eval-and-compile

  (:dh1 "Module header")
  defmodule

  (:dh1 "Top level macros")
  defmacro defmacro' defmacro-m defmacro-m'

  (:dh1 "Temporary macros")
  macrolet macrolet-m

  (:dh1 "Declaring functions")
  defn defn' defdo

  (:dh1 "Expanding macros")
  macroexpand macroexpand-1 exported-macros

  (:dh1 "Compilation context macros")
  with-ghc-version-cond
  with-os-cond

  (:dh1 "Error macro")
  macro-error

  (:dh1 "Expressions")
  cond)

;;; Compile time imports

(:eval-when-compile
  ;; base
  (import Prelude)
  (import Control.Monad (foldM))

  ;; ghc
  (import FastString (unpackFS))
  (import SrcLoc ((SrcSpan ..)))

  ;; finkel-kernel
  (import Language.Finkel)

  ;; Internal
  (import Finkel.Core.Error)
  (import Finkel.Core.List))

;;; Imports

;; base
(import Control.Monad (foldM when))
(import qualified System.Info)

;; ghc
(import Config (cProjectVersionInt))
(import DynFlags ((HasDynFlags ..)))
(import FastString (FastString fsLit unpackFS))
(import GHC (getModuleInfo lookupModule lookupName modInfoExports))
(import Module (mkModuleName))
(import Lexeme (isLexCon))
(import Outputable (ppr showSDoc))
(import SrcLoc ((SrcSpan ..)))
(import TyCoRep ((TyThing ..)))
(import Var (varName))

;; finkel-kernel
(import Language.Finkel)

;; Internal
(import Finkel.Core.Error)
(import Finkel.Core.List)


;;; [Internally used macros]
;;; ~~~~~~~~~~~~~~~~~~~~~~~~
;;;
;;; First, defining `eval-when-compile-and-load' macro, to define functions and
;;; macros in current compilation context and compiled result. Then this module
;;; defines some auxiliary functions, and then a macro `define-macro'' to define
;;; macros for this module itself and compiled result.

(:with-macro ((= eval-when-compile-and-load
                (Macro
                 (\ form
                   (case (unCode form)
                     (List (: _ rest)) (return `(:begin
                                                  (:eval-when-compile
                                                    ,@rest)
                                                  ,@rest))
                     _ (finkelSrcError
                        form
                        "eval-when-compile-and-load: panic"))))))
  (eval-when-compile-and-load
   (:doc "Code transformer function for macro declaration.")
   (:: macro-decl (-> Code Code Code (Fnk Code)))
   (= macro-decl name arg body
     (do (<- tmp (gensym' "tmp"))
         (return `(= ,name
                    (let ((:: ,tmp (-> Code (Fnk Code)))
                          (= ,tmp ,arg ,body))
                      (Macro ,tmp))))))
   %p(INLINABLE macro-decl)

   (:doc "Body function of 'define-macro'.")
   (:: dmac (-> Code (Fnk Code)))
   (= dmac form
     (let ((:: make-tsig (-> Code Code))
           (= make-tsig name `(:: ,name Macro)))
       (case (unCode form)
         (List [_ name arg body])
         (do (<- decl (macro-decl name arg body))
             (return `(:begin
                        ,(make-tsig name)
                        ,decl)))

         (List [_ name doc arg body])
         (| ((<- (Atom (AString _ _)) (unCode doc))
             (do (<- decl (macro-decl name arg body))
                 (return `(:begin
                            ,(make-tsig name)
                            (:doc^ ,doc)
                            ,decl)))))

         _ (finkelSrcError form "invalid args in macro definition"))))
   %p(INLINABLE dmac)

   (:doc "Function for body of `macrolet'.")
   (:: lmac (-> Code (Fnk Code)))
   (= lmac form
     (let ((= f x
             (case (unCode x)
               (List [name arg body]) (macro-decl name arg body)
               _ (finkelSrcError x "lmac: malformed macro"))))
       (case (unCode form)
         (List (: _self (LForm (L _l (List ms))) rest))
         (do (<- ms' (mapM f ms))
             (return `(:with-macro (,@ms') ,@rest)))
         _ (finkelSrcError form "lmac: malformed args"))))
   %p(INLINABLE lmac)))

(:eval-when-compile
  (:doc "Simple macro for defining macro. This macro is used internally
in \"Finkel.Core\" module to define other macros.

==== __Syntax__

> DEFINE-MACRO ::= 'define-macro' NAME [DOC] ARGS BODY
> NAME         ::= varid
> DOC          ::= '\"' comment '\"'
> ARGS         ::= varid | '[' varid* ']' | '(' varid* ')'
> BODY         ::= form

==== __Examples__

Without documentation comment:

@
(define-macro m1a
  form
  (case (unCode form)
    (List [_ x]) (return `(print ,x))))
@

With documentation comment:

@
(define-macro m1b
  \"Documentation comment\"
  form
  (case (unCode form)
    (List [_ x]) (return `(print ,x))))
@
")
  (:: define-macro Macro)
  (= define-macro (Macro dmac)))

(:eval-when-compile
  (define-macro define-macro'
    "Auxiliary macro to define a macro for both compile time and load
time. Used only in this module until 'defmacro-m'' is defined."
    form
    (do (<- body (dmac form))
        (return `(:begin
                   (:eval-when-compile
                     ,body)
                   ,body)))))


;;; Exported codes

(define-macro' eval-when
  "Macro to specify the /PHASE/s of evaluation of /BODY/ codes. Valid
phases are __@compile@__ and __@load@__. The @compile@ phase evaluates
the body forms at the time of compilation, so that the compilation
context can refer to the function and macros definied in the /BODY/
forms. The @load@ phase simply emit the body forms to compiled result.

==== __Syntax__

> EVAL-WHEN ::= 'eval-when' PHASES BODY+
> PHASES    ::= '[' PHASE+ ']' | '(' PHASE+ ')'
> PHASE     ::= 'compile' | 'load'
> BODY      ::= form

==== __Example__

In following module, the function @f@ is defined inside 'eval_when', so
that the function could be accessed from the function @g@ at run-time,
and temporally macro @m@ at compilation time.

@
(defmodule Main
  (require-and-import
    (Prelude)
    (Language.Finkel)))

(eval-when [compile load]
  (defn (:: f (-> Code Code))
    [x]
    `(print ,x)))

(defn (:: g (-> Code (IO ())))
  [x]
  (print (f x)))

(macrolet ((m [x]
             (f x)))
  (defn (:: main (IO ()))
    (do (g 'foo)
        (m 'bar))))
@
"
  form
  (let ((:: at-compile (-> [Code] Bool))
        (= at-compile (elem 'compile))
        (:: at-load (-> [Code] Bool))
        (= at-load (elem 'load))
        (:: gen-eval-when (-> [Code] [Code] (Fnk Code)))
        (= gen-eval-when phases body
          (| ((&& (at-compile phases) (at-load phases))
              (return
               `(:begin
                  (:eval-when-compile
                    ,@body)
                  ,@body)))
             ((at-compile phases)
              (return `(:eval-when-compile
                         ,@(List body))))
             ((at-load phases)
              (return `(:begin
                         ,@(List body))))
             (otherwise
              (finkelSrcError form (++ "eval-when: invalid phase: "
                                       (show phases)))))))
    (case (unCode form)
      (List (: _ (LForm (L _ lst)) body))
      (| ((<- (List phases) lst) (gen-eval-when phases body))
         ((<- (HsList phases) lst) (gen-eval-when phases body)))
      _ (finkelSrcError form (++ "eval-when: invalid form: "
                                 (show form))))))

(define-macro' eval-and-compile
  "Same as 'eval_when' macro with __@compile@__ and __@load@__ phases.

==== __Syntax__

> EVAL-AND-COMPILE ::= 'eval-and-compile' BODY*

==== __Example__

See 'eval_when'.
"
  form
  (case (unCode form)
    (List (: _ body)) (return `(eval-when [compile load]
                                 ,@body))
    _ (finkelSrcError form "eval-and-compile: panic")))

(eval-and-compile
  (:doc "The symbol used for entire argument in macro function.")
  (:: the-macro-arg Code)
  (= the-macro-arg '__form__)

  (:: replace-hyphens (-> String String))
  (= replace-hyphens
    (map (\ x (if (== x #'-) #'_ x))))
  %p(INLINABLE replace-hyphens)

  (:: subst-gensyms (-> [(, Atom Atom)] Code Code))
  (= subst-gensyms kvs
    (fmap (\ x (case (lookup x kvs)
                 (Just y) y
                 Nothing  x))))
  %p(INLINABLE subst-gensyms)

  (:: acc-gensym-names (-> [(, Atom Atom)] Atom (Fnk [(, Atom Atom)])))
  (= acc-gensym-names acc form
    (case form
      (ASymbol sym) (| ((<- (: #'$ (@ cs (: c _))) (unpackFS sym))
                        (elem c [#'a .. #'z])
                        (<- Nothing (lookup form acc))
                        (do (let ((= cs' (replace-hyphens cs))))
                            (<- x (fmap unCode (gensym' cs')))
                            (return (case x
                                      (Atom gsym) (: (, form gsym) acc)
                                      _ acc)))))
      _ (return acc)))
  %p(INLINABLE acc-gensym-names)

  (:: gensymfy (-> Code (Fnk Code)))
  (= gensymfy form
    (do (<- kvs (foldM acc-gensym-names [] form))
        (return (subst-gensyms kvs form))))
  %p(INLINABLE gensymfy)

  ;; Function to make body of `defmacro-m' and `defmacro'.
  ;;
  ;; XXX: Currently does not suuport lambda-list like pattern match in
  ;; macro argument.
  (:: make-defmacro-body (-> String Code Code Code Code (Fnk Code)))
  (= make-defmacro-body label whole name0 arg0 body0
    (let ((:: err (-> Code Code Code))
          (= err form-name name
            `(finkelSrcError
              ,form-name
              (concat ["in macro `" (show ',name) "'\n"
                       "invalid form: `" (show ,the-macro-arg) "'"])))

          (:: atom-arg-body (-> Code Code Code Code Code))
          (= atom-arg-body name arg body form-name
            `(case ,form-name
               (LForm (L $loc (List (: _ __arg__))))
               (let ((= ,arg (LForm (L $loc (List __arg__)))))
                 ,body)
               _ ,(err form-name name)))

          (:: list-arg-body (-> SrcSpan Code [Code] Code Code Code))
          (= list-arg-body l1 name args body form-name
            (let ((:: abind Code)
                  (= abind
                    `(LForm
                      (L _loc
                         (List [_ ,@(LForm (L l1 (List args)))])))))
              `(case ,form-name
                 ,abind ,body
                 _ ,(err form-name name)))))

      (case (unLForm arg0)
        (L l1 (Atom AUnit))
        (gensymfy (list-arg-body l1 name0 [] body0 the-macro-arg))

        (L l1 (List args))
        (gensymfy (list-arg-body l1 name0 args body0 the-macro-arg))

        (L l1 (HsList args))
        (gensymfy (list-arg-body l1 name0 args body0 the-macro-arg))

        (L _ (Atom (ASymbol _)))
        (gensymfy (atom-arg-body name0 arg0 body0 the-macro-arg))

        _ (finkelSrcError whole (++ label ": invalid args")))))
  %p(INLINABLE make-defmacro-body)

  ;; Function to make body expression of `macrolet-m' and `macrolet'.
  (:: make-macrolet-body (-> String Code (-> Code Code) (Fnk Code)))
  (= make-macrolet-body label whole f
    (let ((:: make-macro (-> Code (Fnk Code)))
          (= make-macro code
            (case code
              (LForm (L l (List [name arg body0])))
              (do (let ((= body1 (f body0))))
                  (<- body2
                    (make-defmacro-body label code name arg body1))
                  (return
                   (LForm (L l (List [name the-macro-arg body2])))))

              _ (finkelSrcError code (++ label ": invalid form")))))
      (case (unCode whole)
        (List (: _ (LForm (L l0 (List forms))) rest))
        (do (<- macros (mapM make-macro forms))
            (lmac `(:with-macro ,(LForm (L l0 (List macros)))
                     ,@(List rest))))

        _ (finkelSrcError whole (++ label ": invalid form")))))
  %p(INLINABLE make-macrolet-body))

(define-macro macrolet-m
  "
Variant of 'macrolet', the body of each macro need to be a 'Code' value
wrapped in 'Fnk'. This macro has full access to 'Fnk' in compilation
context.

==== __Syntax__

See 'macrolet'.

==== __Example__

Rewrite of the example shown in 'macrolet':

@
(macrolet-m ((m1 [x]
               (return `(+ ,x 1)))
             (m2 [a b]
               (return `[(m1 ,a) (m1 ,b)])))
  (m2 19 20))
;;; ==> [20,21]
@

"
  form
  (make-macrolet-body "macrolet-m" form id))

(define-macro macrolet
  "Define temporary macros named /NAME/. The defined macros could be
referred from /BODY/. Each macro takes /ARGS/ parameter, and results in
/EXPR/. The parameter /ARGS/ works as in 'defmacro'.

==== __Syntax__

> MACROLET ::= 'macrolet' '(' MACRO* ')' BODY
> MACRO    ::= NAME ARGS EXPR
> NAME     ::= varid
> ARGS     ::= '(' varid* ')' | '[' varid* ']' | varid
> EXPR     ::= form
> BODY     ::= form

==== __Examples__

Temporary macros can refer other temporary macros:

@
(macrolet ((m1 [x]
             `(+ ,x 1))
           (m2 [a b]
             `[(m1 ,a) (m1 ,b)]))
  (m2 19 20))
;;; ==> [20,21]
@
"
  form
  (make-macrolet-body "macrolet" form (\ body `(return ,body))))

(define-macro' defmacro-m
  "A macro similar to 'defmacro', but the body expression need to be a
value of type 'Fnk' 'Code'. This macro has full access to the 'Fnk'
environment in compilation context.

==== __Syntax__

See 'defmacro'.

==== __Examples__

A macro to read a file contents during compilation:

@
(defmacro-m m1 [path]
  (| ((<- (Just path') (fromCode path))
      (do (<- contents (liftIO (readFile path')))
          (return `(putStrLn ,contents))))
     (otherwise
      (finkelSrcError path \"m1: not a file path.\"))))
@

Sample expansion:

>>> (macroexpand '(m1 \"/path/to/a/file.txt\")
(putStrLn \"... contents of the file ...\")
"
  form
  (let ((:: make-def (-> Code (Maybe Code) Code Code (Fnk Code)))
        (= make-def name mb-doc arg body0
          (do (<- body1
                (make-defmacro-body "defmacro-m" form name arg body0))
              (case mb-doc
                (Just doc) (dmac `(_ ,name ,doc ,the-macro-arg ,body1))
                Nothing (dmac `(_ ,name ,the-macro-arg ,body1))))))
    (case (unCode form)
      (List [_ name doc arg body])
      (| ((<- (Atom (AString _ _)) (unCode doc))
          (make-def name (Just doc) arg body)))

      (List [_ name arg body])
      (make-def name Nothing arg body)

      _ (finkelSrcError form "defmacro-m: invalid form"))))

(define-macro' defmacro-m'
  "Variant of 'defmacro_m', wrapped in 'eval_and_compile'.

==== __Syntax__

See 'defmacro'.

==== __Examples__

See 'defmacro' and 'defmacro_m'."
  form
  (case (unCode form)
    (List (: _ rest)) (return `(eval-and-compile
                                 (defmacro-m ,@rest)))
    _ (finkelSrcError form "defmacro-m': impossible happened.")))

(define-macro' defmacro
  "Macro to define a macro named /NAME/, similar to the macro with same
name found in other Lisps, such as Common Lisp, Clojure, LFE, Hy
... etc. The 'defmacro' can take an optional /DOC/ comment string in
second parameter. Next parameter is either a list of /ARGS/, or a single
varid to refer the entire parameter as a list of 'Code's. The last
parameter is a /BODY/ expression, which need to be a value of 'Code'
type.

Note that the 'defmacro' does not add the defined macro to REPL
session. To add macros in REPL session, use 'defmacro'' or write the
macro definition inside 'eval_when'.

==== __Syntax__

> DEFMACRO ::= 'defmacro' NAME [DOC] ARGS BODY
> NAME     ::= varid
> DOC      ::= '\"' comment '\"'
> ARGS     ::= '(' varid* ')' | '[' varid* ']' | varid
> BODY     ::= form

==== __Examples__

Macro taking single parameter named /x/, returns a form with 'print'
applied to the given parameter:

> (defmacro m1a [x]
>   `(print ,x))

Sample expansion:

>>> (macroexpand '(m1a False))
(print False)

Parameters could be enclosed in parentheses or brackets:

> (defmacro m1b (x)
>   `(print ,x))

Macro with documentation comment:

> (defmacro m2
>   \"Documentation comment.\"
>   [a b]
>   `(do (print ,a)
>        (print ,b)))

Sample expansion:

>>> (macroexpand '(m2 False #'x))
(do (print False) (print #'x))

Macro taking parameter as a list of 'Code':

@
(defmacro m3 args
  (case args
    (List [a])   `(print ,a)
    (List [a b]) `(>> (print ,a) (print ,b))
    (List xs)    `(do ,@(map (\\\\ x `(print ,x)) xs))))
@

Expansions of /m3/:

>>> (macroexpand '(m3 False))
(print False)
>>> (macroexpand '(m3 False #'x))
(>> (print False) (print #'x))
>>> (macroexpand '(m3 False #'x \"bar\"))
(do (print False) (print #'x) (print \"bar\"))
"
  form
  ;; As in `dmac', binding `body' to temporay name to support `where'
  ;; in body expression.
  (let ((= build name mb-doc args body
          (do (<- tmp (gensym' "tmp"))
              (let ((:: doc [Code])
                    (= doc (maybe [] return mb-doc))))
              (return `(defmacro-m ,name
                         ,@doc ,args
                         (let ((= ,tmp ,body))
                           (return ,tmp)))))))
    (case (unCode form)
      (List [_ name (@ doc (LForm (L _ (Atom (AString _ _))))) args body])
      (build name (Just doc) args body)

      (List [_ name args body])
      (build name Nothing args body)

      _ (finkelSrcError form "defmacro: invalid form."))))

(defmacro-m' defmacro'
  "Variant of 'defmacro', wrapped in 'eval_and_compile'.

==== __Syntax__

See 'defmacro'.

==== __Examples__

See 'defmacro'.
"
  form
  (return `(eval-and-compile
             (defmacro ,@form))))

(defmacro' macro-error
  "Macro for showing error in macro function. Shows an error message
with the location of entire macro form.

==== __Syntax__

> MACRO-ERROR ::= 'macro-error' string

==== __Example__

Show error with non-integer literals:

> (defmacro e1 [a]
>   (case (fromCode a)
>     (Just n) (toCode (:: (+ n 1) Int))
>     _ (macro-error \"got non-integer literal\")))

Sample runs:

>>> (macroexpand '(e1 9))
10
>>> (macroexpand '(e1 foo))
<interactive>:2:15: error: got non-integer literal: (e1 foo)
"
  [msg]
  `(unsafeFinkelSrcError ,the-macro-arg ,msg))

;;; Pattern matching macro for `LForm' of `Atom' with `AString'.
(:eval-when-compile
  (defmacro pAstring
    [val]
    `(LForm (L _ (Atom (AString _ ,val))))))

(defmacro-m defn
  "Macro for defining function. Supports optional function type
signature /SIG/, which could be a name symbol or a list of name symbol
and type signature form. Parameter /ARGS/ could be enclosed in
parantheses or brackets. When multiple pairs of /ARGS/ and /BODY/ were
given, does expand to function definition with argument pattern
matchings.

==== __Syntax__

> DEFN    ::= 'defn' SIG [DOC] [ARGS] BODY ARGBODY*
> SIG     ::= varid | '(' varid typesig ')' | '(' '::' varid typesig ')'
> DOC     ::= '\"' comment '\"'
> ARGS    ::= '(' varid* ')' | '[' varid* ']'
> BODY    ::= form
> ARGBODY ::= ARGS BODY

==== __Examples__

Function without arguments:

> (defn v1 42)

Function without arguments, with type signature:

> (defn (:: v2 Int) 43)

The '::' in the signature is optional:

> (defn (v3 Int) 44)

Function with arguments, type signature, and documentation comment:

@
(defn (:: fib1 (-> Int Int))
  \"Documentation comment\"
  [n]
  (case n
    0 0
    1 1
    _ (+ (fib1 (- n 1)) (fib1 (- n 2)))))
@

Function with pattern matched arguments, type signature, and
documentation comment:

@
(defn (:: fib2 (-> Int Int))
  \"Documentation comment\"
  [0] 0
  [1] 1
  [n] (+ (fib2 (- n 1)) (fib2 (- n 2))))
@

The last /fib2/ example is same as below:

@
(:: fib2 (-> Int Int))
(:doc^ \"Documentation comment\")
(= fib2 0 0)
(= fib2 1 1)
(= fib2 n (+ (fib2 (- n 1)) (fib2 (- n 2))))
@
"
  form
  (let ((:: build-decls (-> Code [Code] [Code]))
        (= build-decls name
          (let ((= go (: args body rest)
                  (: `(= ,name ,@args ,body) (go rest)))
                (= go _ []))
            go))
        (:: build-doc (-> (Maybe Code) Code))
        (= build-doc mb-doc
          (case mb-doc
            (Just doc) `((:doc^ ,doc))
            Nothing     nil))
        (:: is-tuple (-> FastString Bool))
        (= is-tuple (== (fsLit ",")))
        (:: is-con (-> Code Bool))
        (= is-con name
          (| ((<- (Atom (ASymbol n)) (unCode name))
              (|| (isLexCon n) (is-tuple n)))
             (otherwise False)))
        (:: build-tysig (-> Code Code (Maybe Code) [Code] (Fnk Code)))
        (= build-tysig name ty mb-doc bodies
          (return `(:begin
                     (:: ,name ,ty)
                     ,@(build-doc mb-doc)
                     ,@(build-decls name bodies))))
        (:: build-nosig (-> Code (Maybe Code) [Code] (Fnk Code)))
        (= build-nosig name mb-doc bodies
          (where go
            (= go
              (| ((<- Nothing mb-doc)
                  (<- [x] xs)
                  (return x))
                 (otherwise
                  (return `(:begin ,@xs ,@(build-doc mb-doc))))))
            (= xs (build-decls name bodies))))
        (:: build (-> Code (Maybe Code) [Code] (Fnk Code)))
        (= build sig mb-doc bodies
          (do (when (odd (length bodies))
                (finkelSrcError form "defn: odd number of forms"))
              (case (unCode sig)
                (List [name ty]) (| ((is-con name)
                                     (build-nosig sig mb-doc bodies))
                                    (otherwise
                                     (build-tysig name ty mb-doc bodies)))
                (List [dc name ty]) (| ((== dc '::)
                                        (build-tysig name ty mb-doc
                                                     bodies)))
                (List (: name _)) (| ((is-con name)
                                      (build-nosig sig mb-doc bodies)))
                (Atom _) (build-nosig sig mb-doc bodies)
                (HsList _) (build-nosig sig mb-doc bodies)
                _ (finkelSrcError sig "defn: invalid signature")))))
    (case (unCode form)
      ;; Declaration of string, without documentation. Need to pattern
      ;; match this first to support defining plain string value without
      ;; documentation.
      (List [sig (@ body (pAstring _))])
      (build sig Nothing [nil body])

      (List [sig (@ doc (pAstring _)) body])
      (build sig (Just doc) [nil body])

      (List [sig body])
      (build sig Nothing [nil body])

      (List (: sig (: (@ doc (pAstring _)) rest)))
      (build sig (Just doc) rest)

      (List (: sig rest))
      (build sig Nothing rest)

      _ (finkelSrcError form "defn: invalid form"))))

(defmacro defn'
  "Macro to define a function for both of compilation time and load
time. This macro uses 'eval_and_compile' and 'defn'.

==== __Syntax__

See 'defn'.

==== __Examples__

See 'defn'."
  form
  `(eval-and-compile
     (defn ,@form)))

(defmacro defdo
  "
Macro to define a function with 'defn', with wrapping the body
expressions with /do/.

==== __Syntax__

> DEFDO ::= SIG [DOC] ARGS BODY*
> SIG   ::= varid | '(' varid typesig ')'
> DOC   ::= '\"' comment '\"'
> ARGS  ::= '(' varid* ')' | '[' varid* ']'
> BODY  ::= form

==== __Examples__

Function taking single argument:

@
(defdo (foo (=> (Show a) (-> a (IO ()))))
  [x]
  (print x)
  (print x)
  (print x))
@

Sample run:

>>> (foo True)
True
True
True
"
  form
  (case (unCode form)
    (List (: sig (@ doc (pAstring _)) args body))
    `(defn ,sig
       ,doc
       ,args
       (do ,@body))

    (List (: sig args body))
    `(defn ,sig ,args
       (do ,@body))

    _ (macro-error "defdo: invalid form")))

(defmacro' cond
  "The 'cond' macro, found in many Lisp languages.

The behaviour is same as wrapping the body with @case@ expression with
dummy unit, or @if@ with @MultiWayIf@ GHC language extension.

==== __Syntax__

> COND    ::= 'cond' CLAUSE+
> CLAUSE+ ::= '(' guard+ expr ')'

==== __Examples__

Simple function with weird tests:

@
(defn (:: c01 (-> Int Int Int))
  [a b]
  (cond
    [(even b) b]
    [(odd b) (> a b) b]
    [otherwise a]))
@

Sample run:

>>> (map (c01 5) [1 .. 10])
[1,2,3,4,5,6,5,8,5,10]
"
  body
  `(case ()
     _ (| ,@(mapcar curve body))))


;;; Compilation context macros

;;; Auxiliary function for quoting body of with-xxx-cond macros.
(:: quote-cadr (-> Code Code))
(= quote-cadr form `(,(car form) ',(cadr form)))

(defmacro with-ghc-version-cond
  "Macro to generate code with ghc version variable.

The ghc version value is an `Int' value made from `cProjectVersionInt'.

==== __Syntax__

> WITH-GHC-VERSION-COND ::= 'with-ghc-version-cond' varid body

==== __Example__

Following code result in different `String', according to the ghc version used
for compiling the code:

@
(with-ghc-version-cond ghc
  ((< 810 ghc) \"Ghc version is newer than 8.10.0\")
  ((<= 804 ghc) \"Ghc version is at least 8.4.0\")
  (otherwise \"Old version\"))
@
"
  forms
  (let ((= var (car forms)))
    `(macrolet (($tmp []
                  (let ((:: ,var Int)
                        (= ,var ,(:: (read cProjectVersionInt) Int)))
                    (cond
                      ,@(mapcar quote-cadr (cdr forms))))))
       ($tmp))))

(defmacro with-os-cond
  "Macro to generate code with os name variable.

The name of the os is taken from `System.Info.os'.

==== __Syntax__

> WITH-OS-COND ::= 'with-os-cond' varid body

==== __Example__

Following code result in different `String', according to the OS used for
compiling the code:

@
(with-os-cond os
  ((== os \"linux\") \"OS is Linux\")
  (otherwise \"Non-linux\"))
@
"
  forms
  (let ((= var (car forms)))
    `(macrolet (($tmp []
                  (let ((:: ,var String)
                        (= ,var ,System.Info.os))
                    (cond
                      ,@(mapcar quote-cadr (cdr forms))))))
       ($tmp))))


;;; Macros for macros

(defmacro-m macroexpand-1
  "Expand given form if the given form is a macro, otherwise return the
given form. Note that 'macroexpand_1' and 'macroexpand' are macros, not
functions.

==== __Syntax__

> MACROEXPAND-1 ::= 'macroexpand-1' form

==== __Examples__

>>> (macroexpand-1 '(defmacro f1 [x] `(+ ,x 1)))
(defmacro_m f1 [x]
  (let ((= f1_cs2 (:quasiquote (+ (:unquote x) 1))))
    (return f1_cs2)))
"
  [form]
  (case (unCode form)
    (List [q x]) (| ((|| (== q ':quote) (== q ':quasiquote))
                     (do (<- expanded (expand1 x))
                         (return `',expanded))))
    _ (return form)))

(defmacro-m macroexpand
  "Macro for expanding macro. This macro recursively expands all sub
forms.

==== __Syntax__

> MACROEXPAND ::= 'macroexpand' form

==== __Examples__

>>> (macroexpand '(defmacro f1 [x] `(+ ,x 1)))
(:begin
  (:: f1 Macro)
  (= f1 (let ((:: tmp_cnp (-> Code (Fnk Code)))
              (= tmp_cnp __form__
                (case __form__
                  (LForm (L _loc (List [_ x])))
                  (let ((= tmp_cno (:quasiquote (+ (:unquote x) 1))))
                    (return tmp_cno))
                  _ (finkelSrcError
                     __form__
                     (concat [(show (:quote f1))
                              \"\\ninvalid args: `\"
                              (show __form__)
                              \"'\"])))))
          (Macro tmp_cnp))))
"
  [form]
  (case (unCode form)
    (List [q x]) (| ((|| (== q ':quote) (== q ':quasiquote))
                     (let ((= go expr
                             (do (<- expr' (expand1 expr))
                                 (if (== expr expr')
                                     (return `',expr)
                                     (go expr')))))
                       (go x))))
    _ (return form)))

(defmacro-m exported-macros
  "Macro to return macro names exported from given module as a list of
'String'.

==== __Syntax__

> EXPORTED-MACROS ::= 'exported-macros' modid

==== __Examples__

Listing exported macros in \"Finkel.Core\" module:

>>> (exported-macros Finkel.Core)
[\"cond\",\"defdo\",\"defmacro\", ...]
"
  [name]
  (let ((= f dflags mb-thing acc
          (case mb-thing
            (Just (@ thing (AnId var)))
            (| ((isMacro dflags thing)
                (: (showSDoc dflags (ppr (varName var))) acc)))
            _ acc))
        (= get-exported-names name-str
          (do (<- mdl (lookupModule (mkModuleName name-str) Nothing))
              (<- mb-mod-info (getModuleInfo mdl))
              (case mb-mod-info
                Nothing (return [])
                (Just mi) (do (<- mb-things
                                (mapM lookupName (modInfoExports mi)))
                              (<- dflags getDynFlags)
                              (return (foldr (f dflags) [] mb-things))))))
        (= invalid-err
          (++ "exported-macros: got non-module name symbol `"
              (show name) "'"))
        (= toCodes (. toCode (map toCode))))
    (case (mb-symbol-name name)
      (Just name-str) (do (<- names (get-exported-names name-str))
                          (return `(:: ,(toCodes names) [String])))
      Nothing (finkelSrcError name invalid-err))))


;;; Module header

(defmacro-m defmodule
  "Macro to define header of module named /NAME/. The /IMPEXP/ are forms
for imports and exports. Imports and exports forms can appear in any
order, and starts with one of the following symbols:

[@import@]: The form elements expand to @import@ declaration.

[@import-when@]: Like @import@, but the form elements are wrapped with
@eval-when@ with given phases.

[@require@]: The form elements expand to @:require@ declaration.

[@require-and-import@]: The form elements are expanded to both
@import@ and @:require@.

[@export@]: The form elements expand to export entities.

==== __Syntax__

> DEFMODULE ::= 'defmodule' NAME IMPEXP*
> NAME      ::= modid
> IMPEXP    ::= '(' 'import' form+ ')'
>             | '(' 'import-when' phases form+ ')'
>             | '(' 'require' form+ ')'
>             | '(' 'require-and-import' form+ ')'
>             | '(' 'export' form* ')'

==== __Examples__

Sample module header:

@
(defmodule Foo
  (require (Finkel.Prelude hiding (head tail)))
  (import-when [compile]
    (Control.Monad (foldM)))
  (import (Control.Monad (when))
          (qualified Data.ByteString as BS))
  (export foo bar buzz))
@

Expands to:

@
(:begin
  (:require Finkel.Prelude hiding (head tail))
  (module Foo foo bar buzz)
  (eval-when [compile]
    (import Control.Monad (foldM)))
  (import Control.Monad (when))
  (import qualified Data.ByteString as BS)
  (import Control.Monad (foldM)))
@

"
  form
  (case (unCode form)
    (List rest0)
    (case rest0
      [name]
      (return `(module ,name))

      (: name rest1)
      (do (let ((= merge-sections acc lst
                  (let ((= label (car lst))
                        (= payload (cdr lst)))
                    (case ()
                      _ (| ((== label 'export)
                            (return
                             (if (null (cdr lst))
                                 (: (, 'export (cons '() nil)) acc)
                                 (: (, 'export payload) acc))))
                           ((|| (== label 'use)
                                (== label 'import))
                            (return
                             (: (, 'import (mapcar (\ es `(import ,@es))
                                                   payload))
                                acc)))
                           ((|| (== label 'load)
                                (== label 'require))
                            (return
                             (: (, ':require (mapcar (\ es `(:require ,@es))
                                                     payload))
                                acc)))
                           ((|| (== label 'require-and-import)
                                (== label 'load-use))
                            (return (: (, 'require-and-import payload) acc)))
                           ((== label 'import-when)
                            (let ((= phases (car payload))
                                  (= body0 (cdr payload))
                                  (= body1 (mapcar (\ e `(import ,@e)) body0)))
                              (return (: (, 'eval-when (cons phases body1)) acc))))
                           (otherwise
                            (finkelSrcError lst
                                            "defmodule: unknown section"))))))))
          (<- alist (foldM merge-sections [] rest1))
          (let ((= emit add-load-too header
                  (let ((= e1 (maybe nil id (lookup header alist)))
                        (= e2 (maybe nil
                                     (mapcar (\ es `(,header ,@es)))
                                     (lookup 'require-and-import alist))))
                    (if add-load-too
                        (append e1 e2)
                        e1)))))
          (return
           `(:begin
              ,@(emit True ':require)

              ,@(let ((= mb-mdls (lookup ':eval-when-compile alist)))
                  (case mb-mdls
                    (Just mdls) `((:eval-when-compile
                                    ,@mdls))
                    Nothing nil))

              (module ,name ,@(emit False 'export))

              ,@(let ((= evalwhens (filter (\ (, k _) (== k 'eval-when))
                                           alist))
                      (= f (, _ phases-mdls)
                        (let ((= phases (car phases-mdls))
                              (= mdls (cdr phases-mdls)))
                          `(eval-when ,phases ,@mdls))))
                  (map f evalwhens))

              ,@(emit True 'import))))

      _ (finkelSrcError form "defmodule: invalid form"))

    _ (finkelSrcError form "defmodule: invalid form")))
