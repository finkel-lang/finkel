;;;; File: begin.fnk

#p(LANGUAGE DataKinds)

(defmodule Main
  (require (Finkel.Prelude))
  (import (Data.Proxy)))

(data Nat
  Zero
  (Succ Nat))

(macrolet ((nat-types [n]
             (let ((:: go (-> Int Code Int [Code]))
                   (= go stop body i
                     (if (< stop i)
                         []
                         (let ((= name (make-symbol (++ "N" (show i))))
                               (= next `('Succ ,body)))
                           (: `(type ,name ,body)
                              (go stop next (+ i 1)))))))
               (case (fromCode n)
                 (Just m) `(:begin
                             ,@(go m ''Zero 0))
                 Nothing (error "not an integer")))))
  (nat-types 6))

(defn (:: main (IO ()))
  (print (:: Proxy (Proxy N6))))
