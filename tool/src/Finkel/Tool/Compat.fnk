;;;; Auxiliary macros for GHC version compatibility

(:require Finkel.Core)

(defmodule Finkel.Tool.Compat
  (export define-ghc-version-macro
          with-ghc-version-cond
          with-os-cond)
  (import
   ;; base
   (qualified System.Info)
   ;; ghc
   (Config (cProjectVersionInt))

   ;; finkel-lang
   (Finkel.Prelude)))

(defmacro define-ghc-version-macro
  "Macro to define macro with taking name for ghc version."
  [name version args body]
  `(:eval-when-compile
     (defmacro ,name ,args
       (let ((:: ,version Int)
             (= ,version ,(:: (read cProjectVersionInt) Int)))
         ,body))))

(defmacro with-ghc-version-cond
  "Macro to generate code with ghc version variable."
  forms
  (let ((= var-name (car forms))
        (= var-value (:: (read cProjectVersionInt) Int))
        (= bodies (cdr forms))
        (= f test-and-body
          (let ((= test (car test-and-body))
                (= body (cadr test-and-body)))
            `(,test ',body))))
    `(macrolet (($tmp []
                  (let ((:: ,var-name Int)
                        (= ,var-name ,var-value))
                    (cond
                      ,@(mapcar f bodies)))))
       ($tmp))))

(defmacro with-os-cond
  "Macro to generate code with os name variable.

The name of os is taken from `System.Info.os'."
  forms
  (let ((= var-name (car forms))
        (= bodies (cdr forms))
        (= os-name System.Info.os)
        (= f test-and-body
          (let ((= test (car test-and-body))
                (= body (cadr test-and-body)))
            `(,test ',body))))
    `(macrolet (($tmp []
                  (let ((:: ,var-name String)
                        (= ,var-name ,os-name))
                    (cond
                      ,@(mapcar f bodies)))))
       ($tmp))))
