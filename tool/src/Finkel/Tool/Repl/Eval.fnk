;;; Eval loop in REPL.

(:require Finkel.Core)

(defmodule Finkel.Tool.Repl.Eval
  (export eval-loop eval-once)
  (import-when [:compile]
   ;; finkel-core
   (Finkel.Prelude))
  (import
   ;; base
   (Control.Concurrent.MVar (MVar putMVar takeMVar))
   (Control.Exception ((AsyncException ..) fromException throwIO))
   (Control.Monad (unless void))
   (Control.Monad.IO.Class ((MonadIO ..)))
   (Data.List (intercalate))
   (System.IO (Handle))
   (qualified System.Exit)

   ;; ghc
   (BasicTypes ((SuccessFlag ..)))
   (DynFlags ((DynFlags ..) (GeneralFlag ..) (HasDynFlags ..) (Option ..)
              gopt-set parseDynamicFlagsCmdLine xopt-unset))
   (ErrUtils (pprErrMsgBagWithLoc))
   (Exception (ghandle))
   (GHC ((Target ..) (TargetId ..)
         getPrintUnqual setSessionDynFlags setTargets))
   (GHCi (evalStmt))
   (GhcMonad
    ((GhcMonad ..) getSessionDynFlags modifySession withTempSession))
   (HscMain (hscParsedStmt))
   (HscTypes ((HscEnv ..) (InteractiveContext ..) (InteractiveImport ..)
              FixityEnv SourceError extendInteractiveContextWithIds
              handleFlagWarnings setInteractivePrintName srcErrorMessages))
   (InteractiveEval
    (compileParsedExprRemote getContext parseName setContext))
   (Linker (extendLinkEnv))
   (Module (mkModuleName))
   (Name ((Name) getName nameOccName occNameString))
   (OrdList (toOL))
   (Outputable (ppr mkErrStyle renderWithStyle setStyleColoured
                    showPpr showSDoc vcat))
   (RdrHsSyn (cvTopDecls))
   (SrcLoc (Located mkGeneralLocated unLoc))
   (TyCoRep ((TyThing ..)))
   (Util (looksLikeModuleName))
   (Var (Id Var varType))

   ;; ghc-boot
   (GHC.LanguageExtensions ((Extension ..)))

   ;; ghci
   (GHCi.Message ((EvalExpr ..) (EvalResult ..) (EvalStatus_ ..)
                  (SerializableException ..)))
   (GHCi.RemoteTypes (ForeignHValue))

   ;; finkel-kernel
   (Language.Finkel)
   (Language.Finkel.Builder (HDecl HIE HImportDecl HStmt
                             syntaxErrCode syntaxErrMsg evalBuilder))
   (Language.Finkel.Eval (evalDecls))
   (Language.Finkel.Expand (expands))
   (Language.Finkel.Make (initSessionForMake))
   (Language.Finkel.Fnk ((FnkEnv ..) failS modifyFnkEnv prepareInterpreter))
   (Language.Finkel.Syntax (parseExpr parseImports parseStmt parseTopDecls))
   (Language.Finkel.TargetSource (isFnkFile isHsFile))

   ;; internal
   (Finkel.Tool.Repl.IO)
   (Finkel.Tool.Repl.Macro)
   (Finkel.Tool.Repl.Types)))

;;; Extra imports

(cond-expand
  [(<= 810 :ghc)
   ;; ghc
   (import GHC.Hs.ImpExp
           ((ImportDecl ..)
            (ImportDeclQualifiedStyle)
            isImportDeclQualified))]
  [otherwise
   ;; ghc
   (import HsImpExp ((ImportDecl ..)))])

(cond-expand
  [(<= 806 :ghc)
   (import DynamicLoading (initializePlugins))]
  [otherwise
   (:begin)])

;;; Version compatibility function

(cond-expand
  [(<= 810 :ghc)
   (:begin
     (defn (:: extend-link-env (-> HscEnv [(, Name ForeignHValue)] (Fnk ())))
       [hsc-env names-vals]
       (liftIO (extendLinkEnv (hsc-dynLinker hsc-env) names-vals)))
     (defn (:: is-import-decl-qualified (-> ImportDeclQualifiedStyle Bool))
       isImportDeclQualified))]
  [otherwise
   (:begin
     (defn (:: extend-link-env (-> a [(, Name ForeignHValue)] (Fnk ())))
       [_ names-vals]
       (liftIO (extendLinkEnv names-vals)))
     (defn (:: is-import-decl-qualified (-> Bool Bool))
       id))])

(defn (:: initialize-plugins (-> HscEnv DynFlags (IO DynFlags)))
  [_hsc-env dflags]
  (cond-expand
    [(<= 806 :ghc)
     (initializePlugins _hsc-env dflags)]
    [otherwise
     (pure dflags)]))

(defn (:: optional-dynflags [GeneralFlag])
  "Optional 'GeneralFlag' set for REPL."
  (cond-expand
    [(<= 804 :ghc)
     [Opt_ImplicitImportQualified
      Opt_IgnoreOptimChanges
      Opt_IgnoreHpcChanges]]
    [otherwise
     [Opt_ImplicitImportQualified]]))


;;; Eval loop

(defn (:: init-eval-loop (-> [String] (Fnk ForeignHValue)))
  "Initialization works for evaluation loop."
  [ghc-opts]
  (do initSessionForMake
      prepareInterpreter
      (<- hsc-env0 getSession)

      ;; Parse the ghc options from argument, assuming that the arguments are
      ;; passed from the command line.
      (let ((= on-the-commandline (mkGeneralLocated "on the commmandline"))
            (= lghc-opts (map on-the-commandline ghc-opts))))
      (<- (, dflags0 fileish warns)
        (parseDynamicFlagsCmdLine (hsc-dflags hsc-env0) lghc-opts))
      (liftIO (handleFlagWarnings dflags0 warns))

      ;; As done in the Main.hs in "ghc-bin" package, updating the `ldInputs'
      ;; field o the `DynFlags' with `FileOption', to support linking object
      ;; files.
      (let ((= dflags1 (foldl gopt-set dflags0 optional-dynflags))
            (= (, srcs objs) (partition-args fileish))
            (= dflags2
              (dflags1 {ldInputs (++ (map (. (FileOption "") unLoc) objs)
                                     (ldInputs dflags1))}))))

      ;; Initializing plugins with dflags from updated session.
      (<- dflags3 (liftIO (initialize-plugins hsc-env0 dflags2)))
      (void (setSessionDynFlags dflags3))

      ;; Setting the default `DynFlags' for macro expansion.
      (modifyFnkEnv (\ e (e {envDefaultDynFlags (Just dflags3)})))

      ;; Load modules specified from command line, when given.
      (unless (null srcs)
        (ghandle
         (\ e
           (case (fromException e)
             (Just se) (>>= (src-err-handler se) (. liftIO putStrLn))
             _ (liftIO (print e))))
         (case-do (do (setTargets (map guessFnkTarget srcs))
                      (compile-and-import srcs))
           Failed (liftIO
                   (putStrLn (++ "failed loading: "
                                 (intercalate ", " (map unLoc fileish)))))
           Succeeded (return ()))))

      ;; XXX: Currently the printer function and the arguments returned from
      ;; "System.Environment.getArgs" are defined here and cannot be changed.
      (set-print-name "System.IO.print")

      (make-eval-wrapper [])))

(defn (:: eval-loop (-> [String] Handle (MVar Input) (Fnk ())))
  "Loop to evaluate expressions."
  (eval-loop-or-once False))

(defn (:: eval-once (-> [String] Handle (MVar Input) (Fnk ())))
  "Evalute the form once and return."
  (eval-loop-or-once True))

(defn (:: eval-loop-or-once (-> Bool [String] Handle (MVar Input) (Fnk ())))
  "Evaluate expressions, and loop or return."
  [once-only ghc-opts hdl in-mvar]
  (let ((= withAsyncHandler wrapper
          (ghandle
           (\ e
             (case e
               UserInterrupt (loop wrapper)
               ThreadKilled  (return ())
               _ (do (liftIO (putStrLn (++ "eval-loop: " (show e))))
                     (loop wrapper))))))
        (:: throw-async-io (-> AsyncException (Fnk a)))
        (= throw-async-io (. liftIO throwIO))
        (= withErrorHandler m
          (ghandle
           (\ e
             (case (fromException e)
               (Just se) (fmap Left (src-err-handler se))
               Nothing (case (fromException e)
                         (Just ae) (throw-async-io ae)
                         Nothing (return (Left (show e))))))
           m))
        (= eval-one wrapper
          (do (<- (Input itype form out-mv) (liftIO (takeMVar in-mvar)))
              (<- ret (withErrorHandler
                       (do (<- expanded (expands [form]))
                           (<- dflags getDynFlags)
                           (eval-form hdl dflags wrapper itype expanded))))
              (liftIO (putMVar out-mv ret))))
        (= loop wrapper
          (withAsyncHandler wrapper
                            (>> (eval-one wrapper)
                                (loop wrapper)))))
    (>>= (init-eval-loop ghc-opts)
         (if once-only eval-one loop))))

(defn (:: set-print-name (-> String (Fnk ())))
  "Set the name of function used for printing values in interactive
context."
  [name]
  (case-do (parseName name)
    (: f _) (modifySession
             (\ he (he {hsc-IC (setInteractivePrintName (hsc-IC he) f)})))
    _ (failS "set-print-name: parse error")))

(defn (:: eval-form
        (-> Handle DynFlags ForeignHValue InSource [Code] (Fnk Result)))
  [hdl dflags wrapper itype forms]
  (| ((null forms)
      (return (Right "")))
     ((<- (Right stmt) (evalBuilder dflags parseStmt forms))
      (eval-statement hdl wrapper itype stmt))
     ((<- (Right decls) (evalBuilder dflags parseTopDecls forms))
      (eval-decls decls))
     (otherwise
      (case (evalBuilder dflags parseImports forms)
        (Right idecl) (eval-imports dflags idecl)
        (Left se) (finkelSrcError (syntaxErrCode se) (syntaxErrMsg se))))))

(defn (:: eval-statement
        (-> Handle ForeignHValue InSource HStmt (Fnk Result)))
  [hdl wrapper itype stmt0]
  (do (<- hsc-env getSession)
      (case-do (liftIO (hscParsedStmt hsc-env stmt0))
        (Just (, is h f)) (update-hsc-env hdl wrapper itype hsc-env is h f)
        Nothing (return (Left "eval-statement: no result")))))

(defn (:: eval-imports (-> DynFlags [HImportDecl] (Fnk Result)))
  [dflags imports]
  (do (<- ctx0 getContext)
      (let ((= mkIIDecl (L _ idecl)
              (IIDecl idecl))
            (= mdls
              (++ "; " (intercalate ", "
                                    (map (. (showSDoc dflags) ppr)
                                         imports))))
            (= ctx1 (foldr (\ mdl (add-gt-ii (mkIIDecl mdl)))
                           ctx0 imports))))
      (setContext ctx1)
      (return (Right mdls))))

(defn (:: eval-decls (-> [HDecl] (Fnk Result)))
  [decls]
  (do (let ((= decls' (cvTopDecls (toOL decls)))))
      (<- (, tythings ic) (evalDecls decls'))
      (<- hsc-env getSession)
      (setSession (hsc-env {hsc-IC ic}))
      (let ((= dflags (hsc-dflags hsc-env))
            (= pr tt
              (case tt
                (AnId var) (var-name-and-type dflags (getName var) var)
                _ (++ "; " (showSDoc dflags (ppr tt)))))
            (= show-tything tt acc
              (let ((= nstr (showSDoc dflags (ppr (getName tt)))))
                (if (== "$trModule" nstr)
                    acc
                    (: (pr tt) acc))))
            (= tystrs (foldr show-tything [] tythings))
            (= tystr (intercalate "\n" tystrs))))
      (return (Right tystr))))

(defn (:: update-hsc-env (-> Handle ForeignHValue InSource HscEnv
                             [Id] ForeignHValue FixityEnv (Fnk Result)))
  [hdl wrapper itype hsc-env ids hvals-io fixity-env]
  ;; The `evalStmt' below is from "compiler/ghci/GHCi.hsc", which uses
  ;; `iservCmd' in its implementation.
  (let ((= success fhvals _elapsed ret
          (do (let ((= ic (hsc-IC hsc-env))
                    (= ic2 (extendInteractiveContextWithIds ic ids))
                    (= ic3 (ic2 {ic-fix-env fixity-env}))
                    (= names (map getName ids))
                    (= hsc-env-2 (hsc-env {hsc-IC ic3}))))
              (<- dflags getSessionDynFlags)
              (extend-link-env hsc-env (zip names fhvals))

              ;; InteractiveEval does not export `rttiEnvironment'.
              ;;
              ;; (<- hsc-env-3
              ;;     (liftIO
              ;;      (rttiEnvironment (hscenv {hsc_IC final-ic}))))

              (setSession hsc-env-2)
              (case names
                [name] (| ((== (occNameString (nameOccName name)) "it")
                           (return (Right ret))))
                _ (return
                   (Right (names-and-types dflags names ids))))))
        (= exception serialized
          (case serialized
            (EOtherException e) (return (Left (++ "*** Exception: " e)))
            (EExitCode ecode) (liftIO (System.Exit.exitWith ecode))
            EUserInterrupt (return (Left "Interrupted."))))
        (= incomplete
          (return (Left "update-hsc-env failed.")))
        (= eval-hvals-io
          (evalStmt hsc-env False (EvalApp (EvalThis wrapper)
                                           (EvalThis hvals-io))))
        (= eval-for-prompt
          (do (<- status (liftIO eval-hvals-io))
              (return (, status ""))))
        (= eval-for-connection
          (liftIO (with-io-redirect hdl eval-hvals-io))))
    (do (<- (, status ret)
          ;; Switching behaviour between prompt and network connection. Getting
          ;; printed result as `String' for connection by wrapping the execution
          ;; of compiled result, which is a value of `IO [HValue]' type.
          (case itype
            Prompt eval-for-prompt
            Connection eval-for-connection))
        (case status
          (EvalComplete et (EvalSuccess hvs)) (success hvs et ret)
          (EvalComplete  _ (EvalException e)) (exception e)
          _ incomplete))))


;;; Auxiliary

(defn (:: guessFnkTarget (-> (Located String) Target))
  "Simple function to do similar work done in `GHC.guessTarget', to support
source code file paths with @.fnk@ extension."
  [lsrc]
  (let ((= src (unLoc lsrc))
        (= tid (if (looksLikeModuleName src)
                   (TargetModule (mkModuleName src))
                   (TargetFile src Nothing))))
    (Target tid True Nothing)))

(defn (:: partition-args
        (-> [(Located String)] (, [(Located String)] [(Located String)])))
  "Simplified version of the function with same name defined in @ghc/Main.hs@,
to separate object files from source code files."
  (let ((= f (L l arg) (, srcs objs)
          (if (|| (isFnkFile arg)
                  (isHsFile arg)
                  (looksLikeModuleName arg))
              (, (: (L l arg) srcs) objs)
              (, srcs (: (L l arg) objs)))))
    (foldr f (, [] []))))

(defn (:: src-err-handler (-> SourceError (Fnk String)))
  [src-err]
  (do (<- dflags getSessionDynFlags)
      (<- unqual getPrintUnqual)
      (let ((= sdoc (vcat (pprErrMsgBagWithLoc emsgs)))
            (= style0 (mkErrStyle dflags unqual))
            (= style1 (setStyleColoured True style0))
            (= emsgs (srcErrorMessages src-err))))
      (return (renderWithStyle dflags sdoc style1))))

(defn (:: make-eval-wrapper (-> [String] (Fnk ForeignHValue)))
  [args]
  (do (let ((= form
              `(\ m (System.Environment.withArgs ,args m)))
            (= no-rb-hsc hsc-env
              (hsc-env {hsc-dflags (xopt-unset (hsc-dflags hsc-env)
                                               RebindableSyntax)}))))
      (<- dflags getDynFlags)
      (case (evalBuilder dflags parseExpr [form])
        (Right expr) (withTempSession no-rb-hsc
                                      (compileParsedExprRemote expr))
        (Left err) (finkelSrcError (syntaxErrCode err)
                                   (syntaxErrMsg err)))))

(defn (:: var-name-and-type (-> DynFlags Name Var String))
  [dflags name var]
  (let ((= nstr (occNameString (nameOccName name)))
        (= typ (showPpr dflags (varType var))))
    (if (== nstr "it")
        ""
        (intercalate "\n"
                     (map (++ "; ")
                          (lines (++ nstr (++ " :: " typ))))))))

(defn (:: names-and-types (-> DynFlags [Name] [Var] String))
  [dflags names vars]
  (let ((= tvs (zipWith (var-name-and-type dflags) names vars)))
    (if (all null tvs)
        ""
        (intercalate "\n" tvs))))

(defn (:: add-gt-ii (-> InteractiveImport [InteractiveImport]
                        [InteractiveImport]))
  [mdl acc]
  (if (any (subsume-ii mdl) acc)
      acc
      (: mdl acc)))

(defn (:: subsume-ii (-> InteractiveImport InteractiveImport Bool))
  ;; See `GHCi.UI.iiSubsumes'.
  [(IIModule x) (IIModule y)] (== x y)
  [(IIDecl x) (IIDecl y)] (&& (== (unLoc (ideclName x)) (unLoc (ideclName y)))
                              (== (ideclAs x) (ideclAs y))
                              (|| (not (is-import-decl-qualified
                                        (ideclQualified x)))
                                  (is-import-decl-qualified
                                   (ideclQualified y)))
                              (hiding-subsumes (ideclHiding x)
                                               (ideclHiding y)))

  [_ _] False)

(defn (:: hiding-subsumes (-> (Maybe (, Bool (Located [HIE])))
                              (Maybe (, Bool (Located [HIE])))
                              Bool))
  [_ (Just (, False (L _ [])))] True
  [(Just (, False (L _ xs))) (Just (, False (L _ ys)))] (all (flip elem xs) ys)
  [a b ] (== a b))
