;;; Eval loop in REPL.

(:require Finkel.Core)

(defmodule Finkel.Tool.Repl.Eval
  (export eval-loop)
  (import-when [:compile]
   ;; finkel-core
   (Finkel.Prelude))
  (import
   ;; base
   (Control.Concurrent.MVar (MVar putMVar takeMVar))
   (Control.Exception ((AsyncException ..) fromException throwIO))
   (Control.Monad (void))
   (Control.Monad.IO.Class ((MonadIO ..)))
   (Data.List (intercalate))

   (System.Exit (exitWith))
   (System.IO (Handle))

   ;; ghc
   (DynFlags ((DynFlags ..) (GeneralFlag ..) (HasDynFlags ..)
              gopt-set xopt-unset))
   (ErrUtils (pprErrMsgBagWithLoc))
   (Exception (ghandle))
   (GHC (getPrintUnqual setSessionDynFlags))
   (GHCi (evalStmt))
   (GhcMonad
    ((GhcMonad ..) getSessionDynFlags modifySession withTempSession))
   (HscMain (hscParsedStmt))
   (HscTypes ((HscEnv ..) (InteractiveContext ..) (InteractiveImport ..)
              FixityEnv extendInteractiveContextWithIds
              setInteractivePrintName srcErrorMessages))
   (InteractiveEval
    (compileParsedExprRemote getContext parseName setContext))
   (Linker (extendLinkEnv))
   (Name ((Name) getName nameOccName occNameString))
   (OrdList (toOL))
   (Outputable (ppr mkErrStyle renderWithStyle setStyleColoured
                    showPpr showSDoc vcat))
   (RdrHsSyn (cvTopDecls))
   (SrcLoc (Located unLoc))
   (TyCoRep ((TyThing ..)))
   (Var (Id Var varType))

   ;; ghc-boot
   (GHC.LanguageExtensions ((Extension ..)))

   ;; ghci
   (GHCi.Message ((EvalExpr ..) (EvalResult ..) (EvalStatus_ ..)
                  (SerializableException ..)))
   (GHCi.RemoteTypes (ForeignHValue))

   ;; finkel-kernel
   (Language.Finkel)
   (Language.Finkel.Builder (HDecl HIE HImportDecl HStmt
                             syntaxErrCode syntaxErrMsg evalBuilder))
   (Language.Finkel.Eval (evalDecls))
   (Language.Finkel.Expand (expands))
   (Language.Finkel.Make (initSessionForMake))
   (Language.Finkel.Fnk ((FnkEnv ..) failS modifyFnkEnv prepareInterpreter))
   (Language.Finkel.Syntax (parseExpr parseImports parseStmt parseTopDecls))

   ;; internal
   (Finkel.Tool.Repl.IO)
   (Finkel.Tool.Repl.Types)))

;;; Extra imports

(cond-expand
  [(<= 810 :ghc)
   ;; ghc
   (import GHC.Hs.ImpExp
           ((ImportDecl ..)
            (ImportDeclQualifiedStyle)
            isImportDeclQualified))]
  [otherwise
   ;; ghc
   (import HsImpExp ((ImportDecl ..)))])

(cond-expand
  [(<= 806 :ghc)
   (import DynamicLoading (initializePlugins))]
  [otherwise
   (:begin)])

;;; Version compatibility function

(cond-expand
  [(<= 810 :ghc)
   (:begin
     (defn (:: extend-link-env (-> HscEnv [(, Name ForeignHValue)] (Fnk ())))
       [hsc-env names-vals]
       (liftIO (extendLinkEnv (hsc-dynLinker hsc-env) names-vals)))
     (defn (:: is-import-decl-qualified (-> ImportDeclQualifiedStyle Bool))
       isImportDeclQualified))]
  [otherwise
   (:begin
     (defn (:: extend-link-env (-> a [(, Name ForeignHValue)] (Fnk ())))
       [_ names-vals]
       (liftIO (extendLinkEnv names-vals)))
     (defn (:: is-import-decl-qualified (-> Bool Bool))
       id))])

(defn (:: initialize-plugins (-> HscEnv DynFlags (IO DynFlags)))
  [_hsc-env dflags]
  (cond-expand
    [(<= 806 :ghc)
     (initializePlugins _hsc-env dflags)]
    [otherwise
     (pure dflags)]))

(defn (:: optional-dynflags [GeneralFlag])
  "Optional 'GeneralFlag' set for REPL."
  (cond-expand
    [(<= 804 :ghc)
     [Opt_ImplicitImportQualified
      Opt_IgnoreOptimChanges
      Opt_IgnoreHpcChanges]]
    [otherwise
     [Opt_ImplicitImportQualified]]))


;;; Eval loop

(defn (:: eval-loop (-> Handle (MVar Input) (Fnk ())))
  "Loop to evaluate expressions."
  [hdl in-mvar]
  (let ((= initialize
          (do initSessionForMake
              prepareInterpreter
              (<- hsc-env0 getSession)
              (let ((= dflags0 (hsc-dflags hsc-env0))
                    (= dflags1 (foldl gopt-set dflags0 optional-dynflags))))
              (void (setSessionDynFlags dflags1))

              ;; Initializing plugins with dflags from updated session.
              (<- hsc-env1 getSession)
              (<- dflags2 (liftIO (initialize-plugins hsc-env1 dflags1)))
              (void (setSessionDynFlags dflags2))

              ;; Setting the default `DynFlags' for macro expansion.
              (modifyFnkEnv (\ e (e {envDefaultDynFlags (Just dflags2)})))

              ;; XXX: Currently the printer function and the arguments
              ;; returned from "System.Environment.getArgs" are defined
              ;; here and cannot be changed.
              (set-print-name "Prelude.print")

              (make-eval-wrapper [])))
        (= withAsyncHandler wrapper
          (ghandle
           (\ e
             (case e
               UserInterrupt (loop wrapper)
               ThreadKilled  (return ())
               _ (do (liftIO (putStrLn (++ "eval-loop: " (show e))))
                     (loop wrapper))))))
        (= src-err-handler src-err
          (do (<- dflags getSessionDynFlags)
              (<- unqual getPrintUnqual)
              (let ((= sdoc (vcat (pprErrMsgBagWithLoc emsgs)))
                    (= style0 (mkErrStyle dflags unqual))
                    (= style1 (setStyleColoured True style0))
                    (= emsgs (srcErrorMessages src-err))))
              (return (Left (renderWithStyle dflags sdoc style1)))))
        (:: throw-async-io (-> AsyncException (Fnk a)))
        (= throw-async-io (. liftIO throwIO))
        (= withErrorHandler m
          (ghandle
           (\ e
             (case (fromException e)
               (Just se) (src-err-handler se)
               Nothing (case (fromException e)
                         (Just ae) (throw-async-io ae)
                         Nothing (return (Left (show e))))))
           m))
        (= eval-one wrapper
          (do (<- (Input itype form out-mv) (liftIO (takeMVar in-mvar)))
              (<- ret (withErrorHandler
                       (do (<- expanded (expands [form]))
                           (<- dflags getDynFlags)
                           (eval-form hdl dflags wrapper itype expanded))))
              (liftIO (putMVar out-mv ret))))
        (= loop wrapper
          (withAsyncHandler wrapper
                            (>> (eval-one wrapper)
                                (loop wrapper)))))
    (>>= initialize loop)))

(defn (:: set-print-name (-> String (Fnk ())))
  "Set the name of function used for printing values in interactive
context."
  [name]
  (case-do (parseName name)
    (: f _) (modifySession
             (\ he (he {hsc-IC (setInteractivePrintName (hsc-IC he) f)})))
    _ (failS "set-print-name: parse error")))

(defn (:: eval-form
        (-> Handle DynFlags ForeignHValue InSource [Code] (Fnk Result)))
  [hdl dflags wrapper itype forms]
  (| ((null forms)
      (return (Right "")))
     ((<- (Right stmt) (evalBuilder dflags parseStmt forms))
      (eval-statement hdl wrapper itype stmt))
     ((<- (Right decls) (evalBuilder dflags parseTopDecls forms))
      (eval-decls decls))
     (otherwise
      (case (evalBuilder dflags parseImports forms)
        (Right idecl) (eval-imports dflags idecl)
        (Left se) (finkelSrcError (syntaxErrCode se) (syntaxErrMsg se))))))

(defn (:: eval-statement
        (-> Handle ForeignHValue InSource HStmt (Fnk Result)))
  [hdl wrapper itype stmt0]
  (do (<- hsc-env getSession)
      (case-do (liftIO (hscParsedStmt hsc-env stmt0))
        (Just (, is h f)) (update-hsc-env hdl wrapper itype hsc-env is h f)
        Nothing (return (Left "eval-statement: no result")))))

(defn (:: eval-imports (-> DynFlags [HImportDecl] (Fnk Result)))
  [dflags imports]
  (do (<- ctx0 getContext)
      (let ((= mkIIDecl (L _ idecl)
              (IIDecl idecl))
            (= mdls
              (++ "; " (intercalate ", "
                                    (map (. (showSDoc dflags) ppr)
                                         imports))))
            (= ctx1 (foldr (\ mdl (add-gt-ii (mkIIDecl mdl)))
                           ctx0 imports))))
      (setContext ctx1)
      (return (Right mdls))))

(defn (:: eval-decls (-> [HDecl] (Fnk Result)))
  [decls]
  (do (let ((= decls' (cvTopDecls (toOL decls)))))
      (<- (, tythings ic) (evalDecls decls'))
      (<- hsc-env getSession)
      (setSession (hsc-env {hsc-IC ic}))
      (let ((= dflags (hsc-dflags hsc-env))
            (= pr tt
              (case tt
                (AnId var) (var-name-and-type dflags (getName var) var)
                _ (++ "; " (showSDoc dflags (ppr tt)))))
            (= show-tything tt acc
              (let ((= nstr (showSDoc dflags (ppr (getName tt)))))
                (if (== "$trModule" nstr)
                    acc
                    (: (pr tt) acc))))
            (= tystrs (foldr show-tything [] tythings))
            (= tystr (intercalate "\n" tystrs))))
      (return (Right tystr))))

(defn (:: update-hsc-env (-> Handle ForeignHValue InSource HscEnv
                             [Id] ForeignHValue FixityEnv (Fnk Result)))
  [hdl wrapper itype hsc-env ids hvals-io fixity-env]
  ;; The `evalStmt' below is from "compiler/ghci/GHCi.hsc", which uses
  ;; `iservCmd' in its implementation.
  (let ((= success fhvals _elapsed ret
          (do (let ((= ic (hsc-IC hsc-env))
                    (= ic2 (extendInteractiveContextWithIds ic ids))
                    (= ic3 (ic2 {ic-fix-env fixity-env}))
                    (= names (map getName ids))
                    (= hsc-env-2 (hsc-env {hsc-IC ic3}))))
              (<- dflags getSessionDynFlags)
              (extend-link-env hsc-env (zip names fhvals))

              ;; InteractiveEval does not export `rttiEnvironment'.
              ;;
              ;; (<- hsc-env-3
              ;;     (liftIO
              ;;      (rttiEnvironment (hscenv {hsc_IC final-ic}))))

              (setSession hsc-env-2)
              (case names
                [name] (| ((== (occNameString (nameOccName name)) "it")
                           (return (Right ret))))
                _ (return
                   (Right (names-and-types dflags names ids))))))
        (= exception serialized
          (case serialized
            (EOtherException e) (return (Left (++ "*** Exception: " e)))
            (EExitCode ecode) (liftIO (exitWith ecode))
            EUserInterrupt (return (Left "Interrupted."))))
        (= incomplete
          (return (Left "update-hsc-env failed.")))
        (= eval-hvals-io
          (evalStmt hsc-env False (EvalApp (EvalThis wrapper)
                                           (EvalThis hvals-io))))
        (= eval-for-prompt
          (do (<- status (liftIO eval-hvals-io))
              (return (, status ""))))
        (= eval-for-connection
          (liftIO (with-io-redirect hdl eval-hvals-io))))
    (do (<- (, status ret)
          ;; Switching behaviour between prompt and network
          ;; connection. Getting printed result as `String' for
          ;; connection by wrapping the execution of compiled result,
          ;; which is a value of `IO [HValue]' type.
          (case itype
            Prompt eval-for-prompt
            Connection eval-for-connection))
        (case status
          (EvalComplete et (EvalSuccess hvs)) (success hvs et ret)
          (EvalComplete  _ (EvalException e)) (exception e)
          _ incomplete))))


;;; Auxiliary

(defn (:: make-eval-wrapper (-> [String] (Fnk ForeignHValue)))
  [args]
  (do (let ((= form
              `(\ m (System.Environment.withArgs ,args m)))
            (= no-rb-hsc hsc-env
              (hsc-env {hsc-dflags (xopt-unset (hsc-dflags hsc-env)
                                               RebindableSyntax)}))))
      (<- dflags getDynFlags)
      (case (evalBuilder dflags parseExpr [form])
        (Right expr) (withTempSession no-rb-hsc
                                      (compileParsedExprRemote expr))
        (Left err) (finkelSrcError (syntaxErrCode err)
                                   (syntaxErrMsg err)))))

(defn (:: var-name-and-type (-> DynFlags Name Var String))
  [dflags name var]
  (let ((= nstr (occNameString (nameOccName name)))
        (= typ (showPpr dflags (varType var))))
    (if (== nstr "it")
        ""
        (intercalate "\n"
                     (map (++ "; ")
                          (lines (++ nstr (++ " :: " typ))))))))

(defn (:: names-and-types (-> DynFlags [Name] [Var] String))
  [dflags names vars]
  (let ((= tvs (zipWith (var-name-and-type dflags) names vars)))
    (if (all null tvs)
        ""
        (intercalate "\n" tvs))))

(defn (:: add-gt-ii (-> InteractiveImport [InteractiveImport]
                        [InteractiveImport]))
  [mdl acc]
  (if (any (subsume-ii mdl) acc)
      acc
      (: mdl acc)))

(defn (:: subsume-ii (-> InteractiveImport InteractiveImport Bool))
  ;; See `GHCi.UI.iiSubsumes'.
  [(IIModule x) (IIModule y)] (== x y)
  [(IIDecl x) (IIDecl y)] (&& (== (unLoc (ideclName x)) (unLoc (ideclName y)))
                              (== (ideclAs x) (ideclAs y))
                              (|| (not (is-import-decl-qualified
                                        (ideclQualified x)))
                                  (is-import-decl-qualified
                                   (ideclQualified y)))
                              (hiding-subsumes (ideclHiding x)
                                               (ideclHiding y)))

  [_ _] False)

(defn (:: hiding-subsumes (-> (Maybe (, Bool (Located [HIE])))
                              (Maybe (, Bool (Located [HIE])))
                              Bool))
  [_ (Just (, False (L _ [])))] True
  [(Just (, False (L _ xs))) (Just (, False (L _ ys)))] (all (flip elem xs) ys)
  [a b ] (== a b))
