;;; Starting REPL

(:require Finkel.Core)

(defmodule Finkel.Tool.Repl.Loop
  (export start-repl acquire-repl cleanup-repl)
  (import-when [compile]
   ;; finkel-core
   (Finkel.Prelude))
  (import
   ;; base
   (Control.Concurrent (ThreadId forkIO))
   (Control.Concurrent.MVar (MVar newEmptyMVar))
   (Control.Exception (bracket catch throwIO))
   (Control.Monad (void))

   (System.IO (Handle hClose openTempFile))
   (System.IO.Error (isDoesNotExistError))

   ;; directory
   (System.Directory (getTemporaryDirectory removeFile))

   ;; haskeline
   (System.Console.Haskeline
    (defaultBehavior defaultSettings useFile runInputTBehavior))

   ;; finkel-kernel
   (Language.Finkel.Fnk ((FnkEnv ..) runFnk))

   ;; internal
   (Finkel.Tool.Repl.Eval)
   (Finkel.Tool.Repl.Listen)
   (Finkel.Tool.Repl.IO)
   (Finkel.Tool.Repl.Types)))

;;; Extra imports
(with-os-cond os
  ((== os "mingw32")
   (import System.IO (hSetEncoding stdin utf8)))
  (otherwise
   (:begin)))


;;; Starting the REPL

(defn (:: start-repl (-> (Maybe FilePath) (Maybe Int) FnkEnv (IO ())))
  "Start REPL, maybe listen to given port number when given."
  [mb-path mb-port fnk-env]
  (bracket acquire-repl cleanup-repl (use-repl mb-path mb-port fnk-env)))

(defn (:: acquire-repl (IO (, FilePath Handle (MVar Input))))
  "Return a file path and handle for temporary use."
  (do (<- dir getTemporaryDirectory)
      (<- (, path hdl) (openTempFile dir "finkel-repl-.out"))
      (<- mvar newEmptyMVar)
      (return (, path hdl mvar))))

(defn (:: cleanup-repl (-> (, FilePath Handle a) (IO ())))
  "Clean up temporary file."
  [(, path hdl _)]
  (catch (do (hClose hdl)
             (removeFile path))
    (\ e (if (isDoesNotExistError e)
             (return ())
             (throwIO e)))))

(defn (:: use-repl (-> (Maybe FilePath)
                       (Maybe Int)
                       FnkEnv
                       (, a Handle (MVar Input))
                       (IO ())))
  "Inner work for `start-repl'."
  [mb-path mb-port fnk-env (, _ hdl in-mv)]
  (do (maybe (return ()) (. void (start-listener in-mv)) mb-port)
      (<- tid (forkIO (runFnk (eval-loop hdl in-mv) fnk-env)))
      (let ((= rpl (read-print-loop in-mv tid))
            (= behavior (maybe defaultBehavior useFile mb-path))
            (= run (runInputTBehavior behavior defaultSettings))))

      ;; Using UTF-8 for Windows.  See "GHCi.UI.interactiveUI"
      (with-os-cond os
        ((== os "mingw32")
         (hSetEncoding stdin utf8))
        (otherwise
         (return ())))

      (run-repl (run rpl) mempty)))

(defn (:: start-listener (-> (MVar Input) Int (IO ThreadId)))
  "Start listner in separate thread, and return temporary file for
getting String output from statement."
  [in-mv port]
  (do (putStrLn (++ "Listening on port " (show port)))
      (forkIO (listener (fromIntegral port) in-mv))))
