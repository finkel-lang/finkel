;;; Command line interface utilities.

(:require Finkel.Core)

(defmodule Finkel.Tool.CLI
  (export (CLI ..)
          (ExitCode ..))
  (require
   ;; finkel-lang
   (Finkel.Prelude)

   ;; Internal
   (Finkel.Tool.Compat))
  (import
   ;; base
   (Control.Exception (throwIO))
   (qualified Control.Exception)
   (Control.Monad.IO.Class ((MonadIO ..)))
   (System.Exit ((ExitCode ..)))
   (System.IO.Error (isEOFError))
   (qualified System.Exit as Exit)

   ;; haskeline
   (System.Console.Haskeline ((InputT)))
   (qualified System.Console.Haskeline as Haskeline)))

(with-ghc-version-cond v
  ((<= 810 v)
   (import Control.Monad.Catch
           ((MonadThrow ..) (MonadCatch ..) (MonadMask ..))))
  (otherwise
   (import System.Console.Haskeline ((MonadException ..)))))

;;; Type class for command line interface, ... actually, for 'InputT'
;;; from haskeline package.
(class (=> (MonadIO cl) (CLI cl))
  ;; Show prompt string, and get input line. Return Nothing for EOF
  ;; input.
  (:: getString (-> String (cl (Maybe String))))

  ;; Put output line.
  (:: putString (-> String (cl ())))

  ;; Interrupt signal handler.
  (:: handleInterrupt (-> (cl a) (cl a) (cl a)))

  ;; Perform computation with interrupt handler.
  (:: withInterrupt (-> (cl a) (cl a)))

  ;; Exit with given 'ExitCode'.
  (:: exitWith (-> ExitCode (cl ()))))

(instance (CLI IO)
  (= getString prompt
    (Control.Exception.catch
     (>> (putStr prompt) (fmap Just getLine))
     (\ e (if (isEOFError e)
              (return Nothing)
              (throwIO e)))))
  (= putString putStrLn)
  (= handleInterrupt _handler act act)
  (= withInterrupt act act)
  (= exitWith Exit.exitWith))

(with-ghc-version-cond v
  ((<= 810 v)
   (instance (=> (MonadIO m) (MonadCatch m) (MonadMask m) (MonadThrow m)
                 (CLI (InputT m)))
     (= getString Haskeline.getInputLine)
     (= putString Haskeline.outputStrLn)
     (= handleInterrupt Haskeline.handleInterrupt)
     (= withInterrupt Haskeline.withInterrupt)
     (= exitWith (. liftIO Exit.exitWith))))
  (otherwise
   (instance (=> (MonadIO m) (MonadException m)
                 (CLI (InputT m)))
     (= getString Haskeline.getInputLine)
     (= putString Haskeline.outputStrLn)
     (= handleInterrupt Haskeline.handleInterrupt)
     (= withInterrupt Haskeline.withInterrupt)
     (= exitWith (. liftIO Exit.exitWith)))))
