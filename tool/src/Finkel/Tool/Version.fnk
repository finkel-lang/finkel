;;; Module for showing versions.

(:require Finkel.Core)

(defmodule Finkel.Tool.Version
  (export versionMain)
  (import
   ;; base
   (Control.Monad.IO.Class ((MonadIO ..)))
   (Data.Version (showVersion))
   (System.Console.GetOpt
    ((ArgDescr ..) (ArgOrder ..) (OptDescr ..) getOpt usageInfo))
   (System.Environment (getProgName))

   ;; ghc
   (Config (cProjectVersion))

   ;; finkel-kernel
   (qualified Paths_finkel_kernel)

   ;; finkel-lang
   (qualified Paths_finkel_lang)

   ;; Internal
   (Finkel.Tool.CLI)))



;;; Exported

(defn (:: versionMain (=> (CLI m) (-> [String] (m ()))))
  [args]
  (case (getOpt Permute version-descrs args)
    (, os _ []) (show-version (foldr const AllVersions os))
    (, _ _ es)  (do (putString (concat es))
                    print-version-help)))


;;; Internal

(data VersionMode
  AllVersions
  GhcVersion
  KernelVersion
  LangVersion
  VersionHelp)

(defn (:: version-descrs [OptDescr VersionMode])
  [(Option [#'a] ["all"]
           (NoArg AllVersions)
           "show all versions (default)")
   (Option [#'g] ["ghc"]
           (NoArg GhcVersion)
           "show ghc version")
   (Option [#'k] ["kernel"]
           (NoArg KernelVersion)
           "show finkel-kernel version")
   (Option [#'l] ["lang"]
           (NoArg LangVersion)
           "show finkel-lang version")
   (Option [#'h] ["help"]
           (NoArg VersionHelp)
           "show this help and exit")])

(defn (:: show-version (=> (CLI m) (-> VersionMode (m ()))))
  [mode]
  (case mode
    AllVersions (do print-lang-version
                    print-kernel-version
                    print-ghc-version)
    GhcVersion print-ghc-version
    KernelVersion print-kernel-version
    LangVersion print-lang-version
    VersionHelp print-version-help))

(defn (:: print-ghc-version (=> (CLI m) (m ())))
  (putString (++ "ghc " cProjectVersion)))

(defn (:: print-kernel-version (=> (CLI m) (m ())))
  (putString (++ "finkel-kernel " finkel-kernel-version)))

(defn (:: print-lang-version (=> (CLI m) (m ())))
  (putString (++ "finkel-lang " finkel-lang-version)))

(defn (:: print-version-help (=> (CLI m) (m ())))
  (do (<- name (liftIO getProgName))
      (putString
       (unlines
        [(concat ["USAGE: " name " version [OPTIONS]"])
         ""
         "Show version information."
         ""
         (usageInfo "OPTIONS:\n" version-descrs)]))))

(defn (:: finkel-lang-version String)
  (showVersion Paths_finkel_lang.version))

(defn (:: finkel-kernel-version String)
  (showVersion Paths_finkel_kernel.version))
