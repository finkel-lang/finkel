;;;; Tests for REPL macros

(:require Finkel.Core)

(defmodule ReplMacroTest
  (export replMacroTests)
  (import-when [compile]
    ;; finkel-core
    (Finkel.Prelude))
  (import
   ;; base
   (Control.Exception (catch throw))
   (Control.Monad.IO.Class ((MonadIO ..)))
   (Data.List (intercalate isSubsequenceOf))
   (System.IO.Error (isDoesNotExistError))

   ;; filepath
   (System.FilePath (</>))

   ;; directory
   (System.Directory
    (getCurrentDirectory getTemporaryDirectory removeFile))

   ;; hspec
   (Test.Hspec)

   ;; finkel-core
   (Finkel.Prelude)

   ;; Internal
   (TestAux)))

(defn (:: replMacroTests Spec)
  (describe "ReplMacro"
    (with-os-cond os
      ((== os "mingw32")
       (it "should skip under Windows"
         (pendingWith "Windows not yet supported")))
      (otherwise replMacroTests'))))

(defn (:: replMacroTests' Spec)
  (do (let ((= delines (intercalate "\n"))
            (= testdata name
              (</> "test" (</> "data" name)))))

      (<- current-dir (runIO getCurrentDirectory))
      (<- tmp-dir (runIO getTemporaryDirectory))
      (let ((= m02-dot-fnk (</> tmp-dir "m02.fnk"))))
      (<- (EvalTestFns ok ng satisfy cleanup) (runIO makeEvalTestFns))
      (afterAll_
       (do cleanup
           (remove-if-exist m02-dot-fnk))
       (do
         ;; !
         (ok '(repl-macro ! echo foo) "")

         ;; ?, help
         (satisfy
          '(repl-macro help)
          (\ result
            (case result
              (Right str) (isSubsequenceOf ",type EXPR" str)
              _ False)))

         ;; browse
         (ok '(repl-macro browse Unsafe.Coerce)
             "Unsafe.Coerce.unsafeCoerce :: a -> b")

         ;; cd
         (ok `(repl-macro cd ,(testdata "")) "")
         (ok '(repl-macro cd ../../) "")

         ;; debug
         (ok '(repl-macro debug) "Debug flag is False")
         (ok '(repl-macro debug True) "Debug flag set to True")
         (ok '(repl-macro debug False) "Debug flag set to False")

         ;; expand
         (ok '(repl-macro expand
               (defn f (where g (defn g [x] (print (++ "g: " x))))))
             "(= f (where g (defn g [x] (print (++ \"g: \" x)))))")

         ;; expand!
         (ok '(repl-macro expand!
               (defn f (where g (defn g [x] (print (++ "g: " x))))))
             "(= f (where g (= g x (print (++ \"g: \" x)))))")

         ;; info
         (ok '(repl-macro info putStr)
             "putStr :: String -> IO () \t-- Defined in ‘System.IO’")

         ;; in-package, using `make-symbol' to avoid name mangling.
         (let ((= inpkg (make-symbol "in-package"))))
         (ok `(repl-macro ,inpkg ghc)
             "; current package set to `ghc'")
         (ok `(repl-macro ,inpkg nosuchpkg)
             "; package `nosuchpkg' not found")
         (ok `(repl-macro ,inpkg main)
             "; current package set to `main'")

         ;; kind
         (ok '(repl-macro kind Maybe)
             "Maybe :: * -> *")

         ;; pwd
         (ok '(repl-macro pwd) (show current-dir))

         ;; show
         (ok '(defn (:: f1 (-> Int Int)) [n] (+ n 1))
             "; f1 :: Int -> Int")
         (satisfy
          '(repl-macro show bindings)
          (\ ret
            (case ret
              (Right str) (elem "f1 :: Int -> Int = _" (lines str))
              _ False)))
         (ok '(repl-macro show context)
             (delines
              ["; context"
               ";  IIDecl: import Prelude"]))
         (ok '(repl-macro show dflags)
             (delines
              ["; dflags:"
               ";  ghcLink: LinkInMemory"
               ";  ghcMode: CompManager"
               ";  hscTarget: HscInterpreted"
               ";  objectDir: Nothing"
               ";  thisInstalledUnitId: main"
               ";  forceRecomp: False"]))
         (ok '(:begin
               (repl-macro set -odir /tmp)
               (repl-macro show dflags))
             (delines
              ["; dflags:"
               ";  ghcLink: LinkInMemory"
               ";  ghcMode: CompManager"
               ";  hscTarget: HscInterpreted"
               ";  objectDir: Just \"/tmp\""
               ";  thisInstalledUnitId: main"
               ";  forceRecomp: False"]))
         (ok '(repl-macro show hpt)
             "show: no home package table found")
         (ok '(repl-macro show language)
             (delines
              ["base language is: Haskell2010"
               "with the following modifiers:"
               "  -XNoDatatypeContexts"
               "  -XNondecreasingIndentation"]))
         ;; show linker command uses 'showLinkerState' from ghc package,
         ;; which does printing action, so not returning 'String' value.
         (ok '(repl-macro show linker) "")
         (satisfy
          '(repl-macro show macros)
          (\ ret
            (case ret
              (Right str) (elem ";  defmacro_m'" (lines str))
              _ False)))
         (ok '(repl-macro show modules) "")
         (satisfy
          '(repl-macro show options)
          (\ ret
            (case ret
              (Right str) (isSubsequenceOf
                           "-fimplicit-import-qualified"
                           str)
              _ False)))
         (satisfy
          '(repl-macro show packages)
          (\ ret
            (case ret
              (Right str) (isSubsequenceOf "; packages" str)
              _ False)))
         (ok '(repl-macro show paths)
             (concat
              ["; current working directory:\n"
               ";   " current-dir "\n"
               "; module import search paths:\n"
               ";    ."]))
         (ok '(repl-macro show targets)
             ";; targets: none")

         ;; type
         (ok '(repl-macro type putStrLn)
             "putStrLn :: String -> IO ()")
         (ok '(repl-macro type (foldr + (:: 0 Int)))
             "(foldr + (:: 0 Int)) :: Foldable t => t Int -> Int")
         (ok '(repl-macro type 'x)
             "(:quote x) :: Language.Finkel.Form.Code")

         ;; load and reload
         (let ((= m01-dot-fnk (testdata "m01.fnk"))
               (= dir01-m01 (testdata (</> "Dir01" "M01.fnk")))))
         (ok `(:begin
                (repl-macro load ,(qSymbol m01-dot-fnk))
                main)
             "=== m01.fnk ===")
         (ok '(repl-macro reload)
             "; reloaded test/data/m01.fnk")
         (ok '(repl-macro browse)
             (delines
              ["main :: IO ()"
               "foo :: String"
               "bar :: Int -> Int"]))

         (ok `(writeFile ,m02-dot-fnk
                         "(defn main (print True))")
             "")
         (with-os-cond os
           ((== os "darwin")
            (describe "evaluate (repl-macro load m02.fnk)"
              (it "should skip under darwin"
                (pendingWith "OSX not supported yet"))))
           (otherwise
            (ok `(:begin
                   (repl-macro load ,(qSymbol m02-dot-fnk))
                   main)
                "True")))
         (ok `(writeFile ,m02-dot-fnk
                         "(defn main (print False))")
             "")
         (with-os-cond os
           ((== os "darwin")
            (describe "evaluate (repl-macro reload)"
              (it "should skip under darwin"
                (pendingWith "OSX not supported yet"))))
           (otherwise
            (ok '(repl-macro reload)
                (++ "; reloaded " m02-dot-fnk))))
         (with-os-cond os
           ((== os "darwin")
            (describe "evaluate main"
              (it "should skip under darwin"
                (pendingWith "OSX not supported yet"))))
           (otherwise
            (ok 'main "False")))

         ;; Errors
         (ng '(repl-macro info (foo bar))
             "<quoted code>: error: info: invalid form `(foo bar)'")))))

(defn (:: remove-if-exist (-> FilePath (IO ())))
  [path]
  (catch (removeFile path)
    (\ e (if (isDoesNotExistError e)
             (return ())
             (throw e)))))
